<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('modify')">Previous</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table of Contents</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('fixing2')">Next</a>
</nav>
<p>In what follows, you might want to always select world <span class="world">Empty</span>
when running a program.</p>
<h1>Fixing Reeborg</h1>
<p>As we have seen before, the makers of Reeborg, like many
    not so good programmers,
<em> state that "bugs" are not really bugs but
that they are "features" of their programs.</p>
<ol>
<li>Reeborg has an oil leak.  Oil leaks are damaging for the environment
    and inconvenient for Reeborg who must replenish its supplies when
    it's not busy accomplishing tasks.  The maker of Reeborg claims
    that it is a feature, as it enables you to follow Reeborg's path,
    just like any programmer can learn to "trace" a program.
</li>
<li>Reeborg's steering mechanism is not handled properly by Reeborg's
program: it can only turn left.  The maker of Reeborg, once again,
claims that this is a feature as it present you with an opportunity
to learn about functions.  Reeborg disagrees. </li>
<li>Reeborg has a compass, enabling him to determine which direction
he is facing.  Unfortunately, yet again, the program that enables Reeborg
to get the information from the compass has a bug: it only tells Reeborg
if he is facing North ... or not.  </li>
<li>Reeborg can see if a wall is in front of him, and can also turn
its head to the right to see if there is a wall there.  However, a software
"glitch" (which is another weasel term that software manufacturers use
to avoid having to say that their product has a bug) prevents Reeborg's
program from properly registering a wall when it turns its head left.</li>
</ol>
</em>

<p>When manufacturers make products that are full of bugs, they can
    adopt one of two strategies:</p>
<ol><li>They can issue a <em>manufacturer's recall</em>, asking customers
to bring back the defective product that they bought, so that they can be fixed.  This
option can be costly to the manufacturer.</li>
<li>They can create a <b>new and improved</b> version of their product and
try to sell that version to customers that are not satisfied with their first
purchase.</li></ol>

<p>Javascript programmers have similar options.</p>
<ol><li>They can modify the prototype of objects, thereby changing the behaviour
of all existing and future instances of that object.</li>
<li>They can create new classes of object that share the "good" attributes and
methods of the existing ones but include some new features.</li></ol>
<p>We will follow the second approach and not modify <code>UsedRobot</code> so
that any program that we might have saved will run exactly as before.
For now, write the following lines of code in the <b>library</b> tab (and save them);
you likely don't have to remove any previously saved lines of code in your library.</p>
<pre class="jscode">ImprovedRobot.prototype = Object.create(UsedRobot.prototype);
ImprovedRobot.prototype.constructor = ImprovedRobot;

function ImprovedRobot(x, y, orientation, tokens)  {
    UsedRobot.call(this, x, y, orientation, tokens);
    RUR.world.add_robot(this);
}</pre>
<p>The first line ensures that the prototype of <code>ImprovedRobot</code> will
be a copy of that of <code>UsedRobot</code>. The second line of code states which
function (the constructor) will be called when a <code>new&nbsp;ImprovedRobot</code>
instance is created.  These two lines of code are a standard way to do
<em>prototypal inheritance</em> in modern Javascript. </p>
<p>The rest of the code defines the constructor.
It is specific to the way things are done in Reeborg's world;
the constructor function is defined such that it first create
a <code>UsedRobot</code> at the correct location and then adds the relevant
information to Reeborg's world so that any such robot can be drawn on the screen.</p>
<p>You should test it by writing the following in the <b>code</b> tab</p>
<pre class="jscode">var Reeborg = new ImprovedRobot();
Reeborg.move();
Reeborg.turn_left();</pre>
<p><b>Try it!</b></p>


<a class="left-link" href="Javascript:void(0);" onClick="load_page('modify')">Previous</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('fixing2')">Next</a>