<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('try')">Previous</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table of Contents</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('modify')">Next</a>
</nav>

<h1>Continue</h1>

<p>We have just seen how Reeborg can use the BAFP approach with <code>try/catch</code> blocks
and random movements in order to get out of a maze.  Let's modify slightly the program
we just used, so that we keep track of how many times we go through the <code>while</code>
loop, using the variable <code>nb</code>. We will write some information in
Reeborg's diary and will limit the number of steps so that the written output can
fit on one screen.</p>

<pre class="jscode">var result, nb = 0;
RUR.world.max_steps = 60;
think(0);

while (!at_goal()) {
    nb++;
    result = Math.random();
    if (result < 1/3 ){
        try {
            move();
        } catch (e) {
            write("---");
            //continue;
        }
    } else if (result < 2/3 ) {
        turn_left();
    } else {
        turn_right();
    }
    write(nb);
}</pre>
<p>Run the program above a few times.  Note that whenever <code>---</code> is written
in Reeborg's diary, it is because we caught a bad <code>move</code>, one that would have
made Reeborg hit a wall.  Note that, when this happen, the number above <code>---</code> and
the one below are consecutive.
For example, here is a partial output of a run I did on my computer:</p>
<pre>1
2
3
---
4
---
5
6</pre>
<p>Now, uncomment the line with the <code>continue</code> Javascript keyword, so that it is executed
and run the program again a few times, looking closely at the output.  Can you figure what is going on?</p>
<h2>continue</h2>
<p>The Javascript <code>continue</code> keyword tells Javascript to continue the looping process <b>but</b>
to jump back to the beginning of the loop to do so.  In other words, it instructs Javascript to ignore
everything else that occurs below - but just for that one loop.  Thus, since we write the value
of the variable <code>nb</code> at the bottom of the loop, it is skipped when the <code>continue</code>
statement is encountered.  Jumping back to the top of the loop increments the variable <code>nb</code>
once more and the loop continues.   Thus, with the <code>continue;</code> statement uncommented,
whenever <code>---</code> is written, the corresponding integer is not written, like so:</p>
<pre>1
2
3
---
5
---
7
</pre>


<a class="left-link" href="Javascript:void(0);" onClick="load_page('try')">Previous</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('modify')">Next</a>
