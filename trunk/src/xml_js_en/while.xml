<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('not')">Previous</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table of Contents</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('newspaper3')">Next</a>
</nav>

<h1>For a <code>while</code></h1>
<p>When we want to repeat some instructions until a certain condition is
satisfied, Javascript gives us a simpler way to write this using a new keyword:
<code>while</code>. For example, suppose we want to have Reeborg keep moving until it
reaches a wall. Previously, we might have done something like the following:
<pre class="jscode">
function move_until_wall () {
    if ( front_is_clear() ){
        move();
    }
}

repeat(move_until_wall, 42);</pre>
<p>and hoped that 42 would have been a number of repetitions sufficient to
reach a wall.  Using <code>while</code>, we can write the following</p>
<pre class="jscode">
while ( front_is_clear() ){
    move();
}</pre>
<p>That's it!  No more guessing and asking something to be performed a large
number of time just to ensure that it will be enough.</p>

<h2>How to think about <code>while</code></h2>
<p>Suppose we have the following:</p>
<pre class="jscode">
while ( condition() ){
    do_1();
    do_2();
    do_3();
}</pre>
<p>You can think of this as being equivalent to:</p>
<pre class="jscode">
if ( condition() ){
    do_1();
    do_2();
    do_3();
}
if ( condition() ){
    do_1();
    do_2();
    do_3();
}
if ( condition() ){
    do_1();
    do_2();
    do_3();
}
if ( condition() ){
    do_1();
    do_2();
    do_3();
}
....</pre>
<p>which is to say that the block of code is repeated as long
as the condition remains <code>true</code>.  So, what happens if
the condition is always <code>true</code>?   The block of code is repeated
for ever and the program never ends.</p>
<p>This is bad.</p>
<p>Instead of using this description of
repeated blocks of code, programmers describe this as a <b>loop</b>: that is, you
start with the first instruction (<code>do_1();</code>) inside the code block,
continue with all the others until you reach the last instruction
(<code>do_3();</code>), then <b><em>loop</em> back</b>, or go back, to the test
just before the beginning of the block and see if the condition is satisfied;
if not, you repeat once again the cycle.  If the condition never becomes <code>false</code>,
you keep repeating and end up with an <b>infinite loop</b>.</p>

<p>Conclusion: you want to make sure that the condition will become <code>false</code> at some point.</p>

<h2>Back to hurdles!</h2>
<p>Let's go back to <span class="world">Hurdles&nbsp;1</span>,
<span class="world">Hurdles&nbsp;2</span> and <span class="world">Hurdles&nbsp;3</span>,
and write a single program, using <code>while</code>, and without using <code>repeat()</code>
which works in all three cases.  Your program might look like the following:</p>
<pre class="jscode">
function jump_over_hurdle() {
    // suitable definition
}

function run_or_jump () {
    // suitable definition
}

while ( !at_goal() ){
    run_or_jump();
}</pre>
<p>That's it! No more arbitrary repetitions!  From now on, you should only use
<code>repeat()</code> when you know <b>exactly</b> how many times a given
function must be repeated.</p>

<a class="left-link" href="Javascript:void(0);" onClick="load_page('not')">Previous</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('newspaper3')">Next</a>