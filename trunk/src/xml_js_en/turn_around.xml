<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('functions1')">Previous</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table of Contents</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('library')">Next</a>
</nav>

<h1>Turn around</h1>
<p>In addition to having Reeborg making right turns, you <em>might</em> have
had him turn around a few times; by turning around, I mean changing direction
so that Reeborg is heading back to where it was coming from.  We can
define a function <code>turn_around()</code> as follows:</p>
<pre class="jscode">
function turn_around () {
    turn_left();
    turn_left();
}</pre>
<p>Try it!</p>
<h2>Back to <code>turn_right()</code></h2>
<p>Remember <code>turn_right()</code>?  Here it is again:</p>
<pre class="jscode">
function turn_right () {
    turn_left();
    turn_left();
    turn_left();
}</pre>
<p>Notice how the first two instructions are identical to the
function definition for <code>turn_around()</code>.  When this
happens, we have to remember Rule # 3:</p>
<dl>
<dt><b>Rule # 3</b></dt>
<dd>When writing computer programs, do not repeat yourself.<br>
I repeat: <b>do not repeat yourself!</b></dd>
</dl>
<p>So, we have some repeated instruction.  While <code>turn_right()</code>
is already very simple, a good programming practice is to replace
parts of code that are repeated by a simple function.  Thus,
we should rewrite <code>turn_right()</code> as follows:</p>
<pre class="jscode">
function turn_right () {
    turn_around();
    turn_left();
}</pre>
<p>The idea behind this is that, the shorter a function is, the least
likely there will be bugs in it.  Furthermore, once we have a well-tested
bug-free function, we make sure that we use it whenever we can when
writing longer functions.   I admit, this is almost a silly example ...
but I don't have more complicated examples at this point to illustrate
this important idea.</p>

<h2>Your turn</h2>
<p>Define a <code>step_back()</code> function that would undo
a <code>move()</code> function.  By this, I mean that you
should have</p>
<pre class="jscode"> // starting somewhere at location x,y
move();
step_back();
// back at the same location,
// facing in the same direction as before</pre>
<p>Make sure you to test it!</p>
<a class="left-link" href="Javascript:void(0);" onClick="load_page('functions1')">Previous</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('library')">Next</a>