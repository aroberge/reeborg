<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('continue')">Previous</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table of Contents</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('fixing1')">Next</a>
</nav>

<h1>Adding new methods</h1>
<p>We have already seen how to add methods to a "class" of objects using its
prototype.  In this lesson, we review how to this as well as a slightly
different way that works on individual instances.</p>
<p>Suppose we want to define a method that makes robots take two steps;
let's call it <code>move2</code>.  Using what we have seen before, we
can write the following:</p>
<pre class="jscode">var robot1 = new UsedRobot(1, 2);
UsedRobot.prototype.move2 = function () {
    this.move();
    this.move();
};

var robot2 = new UsedRobot(1, 3);

robot1.move2();
robot2.move2();</pre>
<p><b>Try it</b> and verify that robots, such as <code>robot1</code>,
that have been created <b>before</b>
we added the new method will be able to use it just as well as robots
that are created after the prototype is modified.</p>
<h2>Per instance method</h2>
<p>Instead of modifying the prototype, we can add a method to an <em>instance</em>.
For example, we will add two different methods <em>with the same name</em> to two
different robot instances:</p>
<pre class="jscode">var robot1 = new UsedRobot(1, 2);
var robot2 = new UsedRobot(1, 3);

robot1.move2 = function () {
    this.is_leaky(false);
    this.move();
    this.move();
};

robot2.move2 = function () {
    this.move();
    this.move();
};


robot1.move2();  // no oil leaks!
robot2.move2();
</pre>
<p>This even works if we change the prototype; instance specific
changes take precedence:</p>

<pre class="jscode">var robot1 = new UsedRobot(1, 2);
var robot2 = new UsedRobot(1, 3);

robot1.move2 = function () {
    this.is_leaky(false);
    this.move();
    this.move();
};

UsedRobot.prototype.move2 = function () {
    this.move();
    this.move();
};

robot1.move2(); // no oil leaks!
robot2.move2();
</pre>

<p><b>Make sure to try running the above examples!</b></p>

<h2>How does this work?</h2>
<p>When the following code</p>
<pre class="jscode">instance.method();</pre>
<p>is executed, Javascript first looks to see if <code>method()</code> has
been defined for that particular <code>instance</code>; if not, it looks
for the prototype of the object from which <code>instance</code> has been
defined.   In our case, it would be <code>UsedRobot.prototype</code>.  If
the method still can <b>not</b> be found, it looks <em>up the prototype <b>chain</b></em>,
i.e. from "parent" objects.  In Reeborg's world case,
it would be <code>RUR.Robot.prototype</code>.</p>
<p>We will see this in more details in the following lessons.</p>

<a class="left-link" href="Javascript:void(0);" onClick="load_page('continue')">Previous</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('fixing1')">Next</a>

