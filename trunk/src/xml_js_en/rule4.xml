<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('refine5')">Previous</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table of Contents</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('surprises')">Next</a>
</nav>
<h1>Rule number 4</h1>
<p>In the preceding lessons, we have designed a program that works in many more situations
    than just the original one we considered. (<small>We could come
up with other situations where it would not work ... but we
have done enough for this exercise.</small>)
This program, before we forget, is to allow Reeborg to
explore his world, going around once. While the program is rather short, and
its structure should be clear at this point, it might not be so obvious to
someone who just happened to see it for the first time. It's probably a good
idea either to add comments and/or to introduce more meaningful words. Let's
start by adding comments, somewhat more verbose than we think we might
need. </p>
<pre class="jscode">
// We mark the starting point by putting down a token
put("token");

// We find a clear direction and start moving
while ( !front_is_clear() ) {
    turn_left();
}
move();

/* We know we will have gone around the world
when we come back to the place we put the token
down. */

while ( !token_here() ){
    if (right_is_clear()){  // keep to the right
        turn_right();
        move();
    } else if (front_is_clear()){ // move ... following the right wall
        move();
    } else {
        turn_left();  // follow the wall by turning left
    }
}
</pre>

<p>While this sort of clarifies our intent for each instruction, it is not
really that helpful in summarizing the method (also known as the
<i>algorithm</i>) used in solving the problem. Therefore, these comments
might not be as helpful to another reader as we might have wished. Reading
over the comments, we note that the program has two parts:<br>
1) mark the starting point;<br>
2) follow the right wall until we come back to the start.<br>
Let's rewrite this program so that these two parts become clearer, and
writing the comments differently.</p>
<pre class="jscode">
/* This program instructs Reeborg to go around his world
   counterclockwise, stopping when he comes
   back to his starting point. */

function mark_starting_point_and_move() {
    put("token");
    while ( !front_is_clear() ) {
        turn_left();
    }
    move();
}

function follow_right_wall() {
    if (right_is_clear()){
        turn_right();
        move();
    } else if (front_is_clear()){
        move();
    } else {
        turn_left();
    }
}

var found_starting_point = token_here;

/* end of definitions above;
   program execution below */

mark_starting_point_and_move();

while ( !found_starting_point() ){
    follow_right_wall();
}
</pre>

<p>Isn't this much clearer? </p>
<p><b>Note: you might want to make a copy of <code>follow_right_wall()</code>
in your library so that you can use it if you need it again.</b></p>

<h2>Conclusion</h2>
<p>We started with a simple problem to solve (going around a rectangular
world) and, by improving little by little (also called <i>stepwise
refinement</i>), we manage to write a program that could be used to solve
many different problems. At each step, we kept the changes
small, and made sure we had a working solution, before considering more
complex problems. We also used more descriptive names for parts of the
<i>algorithm</i> which made the program easier to read and, hopefully, to
understand. This is a strategy you should use when writing your own
programs:</p>

<dl>
<dt><b>Rule # 4</b></dt>
<dd>Steps to follow when writing a program:</dd>
<ul>
<li>start simple;</li>
<li>introduce small changes, one at a time;</li>
<li>make sure that each of the changes you have introduced do not invalidate
the work you have done before;</li>
<li>add appropriate comments that don't simply repeat what each instruction
does; and</li>
<li>choose descriptive names.</li>
</dl>
</ul>
<p>The last two parts are essentially the same as Rule number 2.</p>
<p>Now, make sure you have the working program in the editor before
moving to next lesson.</p>
<a class="left-link" href="Javascript:void(0);" onClick="load_page('refine5')">Previous</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('surprises')">Next</a>