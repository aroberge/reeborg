<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('hilo_game')">Previous</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table of Contents</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('rock_paper_scissors')">Next</a>
</nav>

<h1>Taking a break</h1>

<p>While you were getting the code right and testing it by playing the number guessing game,
you perhaps wished you could stop the game.  However, once inside a loop, the only
way you know to get out is to satisfy the condition for that loop.  Sometimes,
there is another way, using the Javascript keyword <code>break</code>.</p>

<p>When a <code>break</code> instruction is encountered inside a <code>while</code> or
a <code>for</code> loop, Javascript terminates the instructions inside the loop block
by jumping outside.  To demonstrate this, we will use a "secret code": if the
player enters -1 as the guess, we will break out of the loop.  Here's
the code to do so</p>

<pre class="jscode">var answer, guess, player_name, play_game;

player_name = prompt("What is your name?");
play_game = confirm("Hello " + player_name + "!  Let's play a game!");

while(play_game) {
    answer = Math.floor(Math.random()*100) + 1;
    guess = parseInt(prompt("Choose a number between 1 and 100."), 10);

    while (guess !== answer) {
        if (guess === -1) {   // check for secret code
            break;
        } else if (guess < answer) {
            guess = parseInt(prompt(guess + " is too low; guess again."), 10);
        }
        else {
            guess = parseInt(prompt(guess + " is too high; guess again."), 10);
        }
    }

    play_game = confirm(answer + " is the answer!\n Play again?");
}

alert("Goodbye " + player_name);
</pre>
<p>This works fine to break out of the <em>inner</em> <code>while</code> loop, where we are
guessing numbers; but it still require an extra step to confirm if we want
to stop playing altogether as this requires that we get out of the <em>outer</em>
loop.   Javascript gives us a way to get out of a specific loop using <b>labels</b>.
A label is any valid Javascript identifier (something that <em>could</em> be used as
a variable or a function name) except that it can not already be used.  When
using labels, we need to specify which one we want to use as in <code>break label</code>.
Here's a new version of the program which uses labels</p>


<pre class="jscode">var answer, guess, player_name, play_game;

player_name = prompt("What is your name?");
play_game = confirm("Hello " + player_name + "!  Let's play a game!");

game_loop:   // label for the outer loop
while(play_game) {
    answer = Math.floor(Math.random()*100) + 1;
    guess = parseInt(prompt("Choose a number between 1 and 100."), 10);

    guessing_loop:    // label for the inner loop
    while (guess !== answer) {
        if (guess === -1) {
            break guessing_loop;  // terminate inner loop
        } else if (guess === -2){
            break game_loop;      // terminate outer loop
        } else if (guess < answer) {
            guess = parseInt(prompt(guess + " is too low; guess again."), 10);
        }
        else {
            guess = parseInt(prompt(guess + " is too high; guess again."), 10);
        }
    }

    play_game = confirm(answer + " is the answer!\n Play again?");
}

alert("Goodbye " + player_name);
</pre>
<p><b>Try it!</b></p>
<h2>Please note</h2>
<p><code>break</code> without labels is often used in Javascript programs.  However,
most people avoid using break with labels as it is found that it makes programs
more difficult to read and understand.  Many other computer languages (Python for example)
have break statements but no label statements.</p>

<a class="left-link" href="Javascript:void(0);" onClick="load_page('hilo_game')">Previous</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('rock_paper_scissors')">Next</a>




