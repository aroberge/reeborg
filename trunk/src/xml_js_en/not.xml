<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('hurdles3')">Previous</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table of Contents</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('while')">Next</a>
</nav>
<h1>Not ... true!</h1>
<p>Reeborg is upset.  It's <b>not</b> raining; it's <b>not</b> snowing. Yet, he cannot go outside and
practise for his hurdles race. </p>
<p>Why, do you ask?    It's because Reeborg is waiting for you to learn about Javascript <b>not</b>.</p>
<h2>Time to be negative.</h2>
<p>Some programming language, like Python, indicate that something is not true by writing <code>not True</code>
which, in Python, is synonymous of <code>False</code>.   Javascript, like quite a few other languages,
uses a convention where <b>negation</b> is represented by a symbol <code>!</code></p>
<p>The exclamation mark indicates negation in Javascript.  However, instead
of appearing at the end of something, like a sentence, it has to appear before something, like some statement
that would be normally either <code>true</code> or <code>false</code>.  Thus <code>!true</code>
is the same thing as <code>false</code>, and <code>!false</code> is the same thing as <code>true</code>.</p>
<h2>Please, make Reeborg happy</h2>
<p>You have already written a program that enables Reeborg to jump hurdles; parts of it went
something like this:</p>
<pre class="jscode">
function run_jump_or_finish () {
    if ( at_goal() ){
        // something
    } else if ( front_is_clear() ){
        // something
    } else {
        // something
    }
}</pre>

<p>Make Reeborg happy by re-writing this program in three other versions, by choosing different
combinations of the negation symbol <code>!</code> <b>and</b> different combinations of <code>if/else</code>.
You will have to pay close attention to where the negation symbol occur <b>and</b> to what is actually
included in each code block.
</p>

<pre class="jscode">
// first choice:

function run_jump_or_finish () {
    if ( at_goal() ){
        // something
    } else if ( !front_is_clear() ){
        // something
    } else {
        // something
    }
}

// second choice ... trickier

function run_jump_or_finish () {
    if ( !at_goal() ){
        if ( front_is_clear() ){
            // something
        } else {
            // something
        }
    } else {
        // something
    }
}

// third choice:


function run_jump_or_finish () {
    if ( !at_goal() ){
        if ( !front_is_clear() ){
            // something
        } else {
            // something
        }
    } else {
        // something
    }
}
</pre>

<a class="left-link" href="Javascript:void(0);" onClick="load_page('hurdles3')">Previous</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('while')">Next</a>