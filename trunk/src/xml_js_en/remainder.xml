<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('array2')">Previous</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table of Contents</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('random')">Next</a>
</nav>

<h1>Remainder operator</h1>
<p>If you have a robot in a given orientation, you know that having that robot
perform four consecutive left turns will have the robot back in its original
orientation; left turns are thus <em>cyclic</em> operations in that performing
them repeatedly makes a robot go through a repeating set of orientations.</p>
<p>Imagine that we want to write a <code>turn_left</code> method given
a robot <code>orientation</code> and the four cardinal directions:
<code>east</code>, <code>north</code>, <code>west</code> and <code>south</code>.
Part of the code could be written using <code>if/else</code> blocks:</p>
<pre class="jscode">if (orientation === east) {
    orientation = north;
} else if (orientation === north) {
    orientation = west;
} else if (orientation === west) {
    orientation = south;
} else {  // orientation === south
    orientation = east;
}</pre>
<p>or using a <code>switch</code> statement (which we will explain in a later lesson)</p>
<pre class="jscode">switch (orientation) {
    case east:
        orientation = north;
        break;
    case north:
        orientation = west;
        break;
    case west:
        orientation = south;
        break;
    case south:
        orientation = east;
        break;
}</pre>
<p>Both of these ways of writing code are fairly readable but they would
become rather tedious (and error-prone) if we were to allow intermediate
orientations such as <code>north_east</code> (half-way between <code>north</code> and <code>east</code>)
or even <code>north_north_east</code> (half-way between <code>north</code> and <code>north_east)</code>,
<em>etc</em>.   There exists a more concise and less error-prone way of performing cyclic operations using numerical
variables and the remainder operator <code>%</code>.</p>
<h2>Whole number division</h2>
<p>When you first learn about divisions, you saw whole number or integer divisions:</p>
<ul><li>8 divided by 2 is 4</li>
<li>8 divided by 4 is 2</li>
<li>8 can not be divided by 3</li></ul>
<p>Then, before seeing fractions, you learn about remainders:</p>
<ul><li>8 divided by 2 is 4 (with a remainder of 0)</li>
<li>8 divided by 3 is 2 (with a remainder of 2)</li>
<li>8 divided by 5 is 1 (with a remainder of 3)</li>
<li><em>etc.</em></li></ul>
<p>In Javascript, the remainder operator is represented by the symbol <code>%</code></p>
<pre class="jscode">8 % 5 = 3</pre>
<p>Try running the following program and observe the result in Reeborg's Diary:</p>
<pre class="jscode">for (var i = 0; i < 10; i++) {
    write( i % 3);
}
</pre>
<p>As you can see, the result cycles through the values 0, 1 and 2.</p>
<h2>Remainder and left turns</h2>
<p>Suppose that we define the following:</p>
<pre class="jscode">east = 0;
north = 1;
west = 2;
south = 3;</pre>
<p>Then, clearly we have:</p>
<pre class="jscode">north = east + 1;
west = north + 1;
south = west + 1;</pre>
<p>Unfortunately, <code>south + 1 = 4</code> is not the same as <code>east</code>.
However, <code>4 % 4 = 0 = east</code>.  You can verify that we have:</p>
<pre class="jscode">north = (east + 1) % 4;
west = (north + 1) % 4;
south = (west + 1) % 4;
east = (south + 1) % 4;</pre>
<p>Thus, we can perform a left turn as follows:</p>
<pre class="jscode">orientation ++;  // adds 1
orientation %= 4;  // equivalent to  orientation = orientation % 4;</pre>
<p>Verify it by running the following code:</p>
<pre class="jscode">var orientation = 0;
for (var i = 0; i < 12; i++ ){
    orientation++;
    orientation %= 4;
    write(orientation);
}
</pre>
<h2>Your turn</h2>
<p>For right turns, we should go through the orientations in the reverse
cyclic order: 3, 2, 1, 0, 3, ...  Try to implement it using either the
decrement operation</p>
<pre class="jscode">orientation--;  // subtract one</pre>
<p>or using the fact that three left turns is a right turn</p>
<pre class="jscode">orientation += 3;</pre>
<p>You will see that only one of these two approaches works as a result of
a property of the remainder operator when dealing with negative numbers.</p>
<h2>When you are done ...</h2>
<p>Execute the following program, examine the result in Reeborg's Diary and
    see if the code generally makes sense to you:</p>
<pre class="jscode">var Reeborg = new UsedRobot();
view_source(Reeborg.turn_left);
view_source(Reeborg.__turn_right);</pre>


<a class="left-link" href="Javascript:void(0);" onClick="load_page('array2')">Previous</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('random')">Next</a>

