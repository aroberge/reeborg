<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('recursion5')">Previous</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table of Contents</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('return2')">Next</a>
</nav>

<h1>Return</h1>

<p>As you know, Reeborg is not exactly in good shape. He can only turn left, has an oil leak,
can only see walls when they are right in front of him or immediately to his right,
and can see tokens only when he is literally standing on top of them.
Reeborg has also a (somewhat broken) compass which he can used to find out if is is facing north ... or not.
To find out if he is facing north, you can ask Reeborg to do the test <code>is_facing_north()</code>.
<small>Note: North is toward the top of the screen; East is toward the right, West toward the left and South
toward the bottom.</small></p>

<h2>Try it!</h2>

<p>Choosing an appropriate world, write a short program that will ensure that Reeborg
    will turn left until he faces north, no matter what his starting orientation is.</p>

<h2>Getting results from functions</h2>
<p>Tests like <code>is_facing_north()</code> are actually Javascript functions.
They differ from other functions like <code>turn_left()</code> or <code>move()</code>
in that they <code>return</code> a value.  Let's start by considering a simple example: try
having Reeborg execute the following program.</p>
<pre class="jscode">function interrupted_two_steps() {
    move();
    return;
    move();
}

interrupted_two_steps();</pre>

<p>Since jshint is used in Reeborg's world to check the code prior to execution,
    you will get a warning <em>Unreachable 'move' after 'return'</em> and see that
Reeborg only takes one step.  Let's get rid of the warning by "hiding"
the <code>return</code> keyword inside an <code>if</code> block.</p>

<pre class="jscode">function interrupted_two_steps() {
    move();
    if (true) {
        return;
    }
    move();
}

interrupted_two_steps();</pre>
<p>Even though we do not get a warning, the second <code>move()</code> instruction
is not executed as the execution of the function ends when the <code>return;</code>
statement is executed.</p>

<p>The <code>return</code> keyword can actually be accompanied by something else.
For example, try the following:</p>
<pre class="jscode">function north(){
   return is_facing_north();
}

while (!north()) {
    turn_left();
}
</pre>
<p>As you have tried it, you noticed that <code>north()</code> was giving the same
result as <code>is_facing_north()</code>; that is the effect of the <code>return</code>
statement.  We can use this to have Reeborg be able to identify orientations
other than North.  First, note that if Reeborg turns left 4 times, he will be back
to its initial orientation; we do want Reeborg to end the test in the same orientation
as that which he had at the start.  Now, suppose we would like to know if Reeborg was facing
South.  We could ask Reeborg to turn left twice, note if his orientation is North
(which it should be if he was facing South) or not, turn left twice more, to go back
to its original orientation, and tell us what he remembered using the <code>return</code>
statement.  One thing we need to do: have Reeborg use a <em>variable</em> to remember
its orientation after two left turns.</p>

<pre class="jscode">function is_facing_south(){
    turn_left();
    turn_left();
    var remember = is_facing_north();
    turn_left();
    turn_left();
    return remember;
}

// now, ensure that Reeborg is facing South
while (!is_facing_south()) {
    turn_left();
}</pre>

<p><b>Make sure you try it!</b></p>

<p>This works ... but, depending on its initial orientation, you might get dizzy if
you keep track of all left turns that Reeborg has to make: when its orientation
is not South, for each left turn that he makes to change its orientation, he must
make 4 more to determine its new orientation!</p>


<p>Later, by digging in Reeborg's built-in program, we will find a way to
fix its compass and have it determine its orientation without getting dizzy.</p>

<h2>Mini-quiz</h2>

<p>Write a program that has Reeborg face West, no matter what his original orientation is.
Test it with Reeborg in various starting orientations, by giving him a few <code>turn_left()</code>
instructions first.</p>

<h2>How to think about return</h2>
<p>Suppose we have the following:</p>
<pre class="jscode">function some_function () {
    ...
    return something;
}

... = some_function();
</pre>
<p>In this case, the call to <code>some_function()</code> on the last line gets
replaced by the value of <code>something</code> which is what follows the
<code>return</code> keyword.  If nothing follows <code>return</code> the result is
<code>undefined</code>.</p>

<a class="left-link" href="Javascript:void(0);" onClick="load_page('recursion5')">Previous</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('return2')">Next</a>