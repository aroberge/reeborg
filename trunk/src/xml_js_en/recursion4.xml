<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('recursion3')">Previous</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table of Contents</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('recursion5')">Next</a>
</nav>
<h1>Counting on recursion</h1>
<p>Reeborg knows how to count ... but we have not seen that yet and will not for a while.
If you know some Javascript other than what you've learned here, you might already know
how to make Reeborg count using numerical variables; however, I ask you to not use those
in what follows.</p>
<p>Select world <span class="world">Tokens&nbsp;5</span>.  Where Reeborg stands, a single
token can be found.  You know how to make Reeborg take the token and move to the next
square.  I ask you to do this and have Reeborg repeat these two steps until he
finds itself on a square where no token is to be found.  Then, Reeborg must drop
all the tokens collected on that square and move to the next square.</p>
<p>The exact same program must work with world <span class="world">Tokens&nbsp;6</span>, which
has a different number of tokens - so you can not use <code>repeat()</code> as you don't have
a fixed number of repetitions.</p>
<p>Reeborg starts with an infinite number of tokens in his pockets: so you can not
use <code>has_token()</code> to figure out when to stop dropping tokens on the one
spot.</p>
<p>Instead, use recursion to write a solution to this problem.  An outline of a solution
can be found below.</p>
<pre class="jscode">function collect() {
    // something
    // something
    if (some_condition) {
        // something
    }
    //something
}

collect();
move(); </pre>
<a class="left-link" href="Javascript:void(0);" onClick="load_page('recursion3')">Previous</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('recursion5')">Next</a>