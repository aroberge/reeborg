<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('diary')">Previous</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table of Contents</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('while_num')">Next</a>
</nav>

<h1>Increment</h1>

<p>Make sure you have the <b>Editor</b>, the <b>World</b> and the <b>Diary</b> panels open.
Select world <span class="world">Around&nbsp;1</span> and adjust the width of the
<b>World</b> panel so that you see the entire world. (You can width of the panels by "grabbing" the
dotted line between panels and dragging it.)</p>
<p>Now, suppose we wanted to count the number of steps taken by Reeborg to reach the
wall on the right from its starting position.  One way to do this is to use a variable
which I will name <code>number_of_steps</code> and give it an initial value of 0.
Then, each time that Reeborg takes a step, I will add 1 to the <em>previous</em> value
of <code>number_of_steps</code>.  This is done in Javascript using the following syntax:</p>
<pre class="jscode">number_of_steps = number_of_steps + 1;</pre>
<p><b>Do not think of this as a mathematical equation!</b>  Clearly, if this were a mathematical
equation, the variable on the left hand side of the "equal sign" would not have the same
value as the terms on the right hand side.  However, in Javascript, and many other programming
languages, "=" is known as the <b>assignment operator</b>: Javascript determines the value
on the right hand side of "=" and use the variable name on the left hand side as a way
to remember that value.  Thus, if we have</p>
<pre class="jscode">var n;
n = 1;
n = n + 3;
write(n);  // outputs 4</pre>
<p>it is equivalent to</p>
<pre class="jscode">var n;
n = 1;
n = 1 + 3;  // notice how we use "1" instead of "n"
write(n);  // outputs 4</pre>
<p><b>Try it!</b></p>
<p>Because this type of operation, known as <em>incrementing</em> a variable occurs so
often, Javascript, and many other languages, allow the use of the following shortened notation,
using the <code>+=</code> operator:</p>
<pre class="jscode">var n;
n = 1;
n += 3;
write(n);  // outputs 4</pre>
<p>If the value by which we want to <em>increment</em> the variable is 1, we can even
use a shorter expression:</p>
<pre class="jscode">var n;
n = 1;
n++;
write(n);  // outputs 2</pre>
<p><b>Try it!</b></p>
<h2>Counting steps</h2>
<p>We are now ready to write a program to have Reeborg count the number of
steps using world <span class="world">Around&nbsp;1</span>.
I will write it for you here, but you must copy it in the
editor to run it.  Ideally, you should then modify it to try the other ways
we have seen and that can be used to <em>increment</em> a variable.</p>
<pre class="jscode">var number_of_steps = 0;

function move_and_count_steps() {
    move();
    number_of_steps++;
}

while (front_is_clear()){
    move_and_count_steps();
}

write(number_of_steps);  // should be 9</pre>
<h2>Your turn</h2>
<p>Write a program so that Reeborg goes around world <span class="world">Around&nbsp;1</span> and
have him count the number of steps <b>and</b> the number of left turns, writing them
in his diary at the end.  You should start by putting a token down to mark what will be the
end position.</p>
<a class="left-link" href="Javascript:void(0);" onClick="load_page('diary')">Previous</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('while_num')">Next</a>