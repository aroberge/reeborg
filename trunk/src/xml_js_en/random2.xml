<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('switch')">Previous</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table of Contents</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('tantrum')">Next</a>
</nav>

<h1>Random escapes</h1>

<p>In the two games that we've written, we have seen how to make use of Javascript's
<code>random()</code> method to make arbitrary choices.
Let's do this in Reeborg's world.  </p>

<p>Select world <span class="world">Maze&nbsp;1</span>.  Instead of using
a sound strategy, Reeborg is going to attempt to get out of the maze
by making arbitrary, or random choices.
Here's the basic algorithm that Reeborg will follow:</p>

<ul>While Reeborg is not out of the maze
<li>Reeborg makes an arbitrary decision to either <code>move</code> forward or
turn left or right. </li>
<li>If the decision is to move forward, Reeborg also checks to make sure
    that there is no wall blocking the way.</li>
</ul>

<p>Our program is based on the techniques we have seen up to now.
If Reeborg decides to move, he also checks for the presence of a wall in front;
this is done using <code>&amp;&amp;</code>, the <em>logical <b>and</b></em> operator.
This is sometimes describe as a <em>Look before you leap</em> (LBYL) approach.</p>
<pre class="jscode">var result;
think(0);

while (!at_goal()) {
    result = Math.random();
    if (result < 1/3 && front_is_clear()){
        move();
    } else if (result < 2/3 ) {
        turn_right();
    } else {
        turn_left();
    }
}
</pre>

<p>We have made Reeborg spend little time thinking and act as fast as possible as
it can take quite a while to find the exit, by using <code>think(0)</code>.  Here's
a successful run of that program:</p>
<img src="src/images/random_maze.png" alt="random escape from maze"/>
<p>If you try running this program a few times, you will almost certainly find out that
Reeborg does not always get out: it gets tired after 1000 actions (<code>move</code>
or <code>turn_left</code>) and quits.  You can increase the number of actions
that Reeborg will perform, say to 10000, by writing </p>
<pre class="jscode">RUR.world.max_steps = 10000;</pre>
<p>as the first instruction.  This maximum number of step variable was introduced
by the designers of Reeborg's world to help prevent infinite loops.</p>

<p>Before we see another way of escaping from the maze, we need to learn
about Reeborg's tantrums!</p>

<a class="left-link" href="Javascript:void(0);" onClick="load_page('switch')">Previous</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('tantrum')">Next</a>
