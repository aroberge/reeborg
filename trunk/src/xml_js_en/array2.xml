<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('array')">Previous</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table of Contents</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('remainder')">Next</a>
</nav>

<h1>Many robots ... again</h1>
<h2>First, an aside ...</h2>
<p>I have mentioned before that it is useful to add comments to code to explain
<b>why</b> something is done a certain way; <b>how</b> something is done should
not required comments if the code is written in a readable way!</p>
<p>One of the problems with comments is that there is no way to guarantee
that they reflect what the code does, since they are ignored by the computer.
Often, a bug is found, the code is corrected ... but the comments are not.
This situation is even more problematic for <em>documentation</em> about a program, such as
these lessons, because they (the code and the documentation) are in separate files
with no obvious link between the two.   Partly for this reason, I will often ask
you to use <code>view_source()</code> or <code>write()</code> or <code>inspect()</code> to see how a particular
feature of Reeborg's world is implemented so that what you see is <b>exactly</b>
the program as it is run ... and not an earlier version.</p>
<p>In this lesson, I will include some lines of code from Reeborg's world
<em>as they exist at the time I am writing this lesson</em> which may be slightly
different from the way are today, as you read this.  However, you should use <code>view_source()</code> or
<code>write()</code> and <code>inspect()</code> whenever I suggest you to do so,
to either confirm that the content of this lesson is accurate or, if not, to
find out the most recent (and hence better!) way that a certain feature has
been implemented.</p>
<h2>Robot actions: different ways</h2>
<p>Select world select <span class="world">Empty</span> and run the following program,
ideally one instruction at a time using the <b>step</b> button.
Which robot makes the last <code>move()</code>?</p>
<pre class="jscode">var Reeborg = new UsedRobot();
var Erdna = new UsedRobot(2,2);

Reeborg.move();
RUR.world.robots[0].move();

Erdna.move();
RUR.world.robots[1].move();

move();</pre>
<p>You might find it useful to include the line</p>
<pre class="jscode">DEBUG.ON = true;</pre>
<p>to see some additional info printed just above Reeborg's world.</p>
<p>Next, make sure that Reeborg's Diary is open and execute the following:</p>
<pre class="jscode">view_source(move);</pre>
<p>Notice how this function contains only one instruction which should match an
instruction from the above program with two robots.   This instruction tells
the <b>first</b> robot (i.e. the one with the zero index) from the array
<code>RUR.world.robots</code> to move.</p>
<p>Next, execute the following:</p>
<pre class="jscode">view_source(UsedRobot);</pre>
<p>Note how it contains the line</p>
<pre class="jscode">RUR.world.add_robot(this);</pre>
<p>which strongly suggests that we are <em>adding a robot to a world</em>.
Here, <small>and it is not obvious</small>, <code>this</code> refer to the
<code>UsedRobot</code> that is "created" when we invoke
<code>new UsedRobot()</code>.
Let's dig deeper into the code by executing the following:</p>
<pre class="jscode">view_source(RUR.world.add_robot);</pre>
<p>One of the lines of the output is </p>
<pre class="jscode">this.robots.push(robot);</pre>
<p>where <code>this</code> refers to <code>RUR.world</code> and
<code>robot</code> refers to the <em>different</em> variable <code>this</code> that was passed to the
method <code>add_robot</code>.</p>
<p><b>Granted, the use of <code>this</code> in Javascript can be confusing...</b>
However, what I really want to draw your attention to here is
that we use <code>push</code> which, as we have seen before, is a method used to add items to an array
in Javascript.</p>
<p>Let's explain what this all means...</p>
<p>When a user writes</p>
<pre class="jscode">robot_name = new UsedRobot()</pre>
 <p> a new robot is created <b>and</b> is added to an array.  Thus, one
can either refer to this robot by its "name" or by the array item which
was used to record it.  </p>
<p>Why do it like that, you ask?...</p>
<p>The reason is that when <b>you</b> write a program, you choose your own
names to refer to a robot.  The programmers that designed Reeborg's world have
no way to know which name you use to refer to a particular robot.  However,
they can keep track of how many robots you add, via <code>RUR.world.robots.length</code>,
and record every robot position and orientation at each "frame" using the corresponding array index,
and display the result one frame at a time
to create the animation.</p>
<p>And, when you select a world with a robot already present, that robot has no name ...
but it can be referred to as the zeroth-index robot in <code>RUR.world.robots</code> which
allows you to use the simple <code>move()</code> or <code>turn_left()</code>.</p>
<h2>No robot?</h2>
<p><b>What happens if you try to use <code>move()</code> in world <span class="world">Empty</span>
without creating a <code>new UsedRobot</code> first?</b></p>
<p>Once you have tried to move an absent robot, select a world <b>with</b> a robot in
it and try the following code first with the second line commented-out (as written) and
then with the second line being executed.</p>
<pre class="jscode">RUR.world.robots.pop();
//var Reeborg = new UsedRobot(4,4);
move();</pre>
<p>If the result does not make sense to you, make sure to read the both the previous lesson and
this one again.</p>
<a class="left-link" href="Javascript:void(0);" onClick="load_page('array')">Previous</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('remainder')">Next</a>

