<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('object')">Previous</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table of Contents</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('fixed')">Next</a>
</nav>
<h1>Positional and named arguments</h1>
<p>If we want to have a new robot at position <code>x=2</code> and <code>y=3</code>, this
is how we do it:</p>
<pre class="jscode">var a_robot = new UsedRobot(2, 3)</pre>
<p>If we only specify the value of the x coordinate (i.e. the very first argument
for the <code>UsedRobot</code> function), the y argument will take
the default value of 1, as decided by the makers of Reeborg's world.</p>
<p>These functions arguments are known as <em>positional</em> arguments since
the order in which they appear determine the variable to which they are assigned.</p>
<p>Now, remember the last time we created an "improved" robot:</p>
<pre class="jscode">function ImprovedRobot(leak, x, y, orientation, tokens)  {
    UsedRobot.call(this, x, y, orientation, tokens);
    if (!leak) {
        this.is_leaky(false);
    }
    RUR.world.add_robot(this);
}</pre>
<p>The first argument is <b>not</b> the value of the x coordinate but
whether or not the robot will have a leak.  If we want to specify a value for
the x coordinate we <b>must</b> also specify if the robot will be leaky or not:</p>
<pre class="jscode">var leaky = ImprovedRobot(true, 5);  // located at x=5, y=1</pre>
<p>Since the order of the parameters differs from the existing <code>UsedRobot</code>,
it creates confusion.  An alternative would have been to have the <code>leak</code> argument
added at the very end of the argument list so that the order of the first four arguments
(<code>x, y, orientation, tokens</code>) would have remained the same.  However, in doing
so, if we had wanted to only specify the <code>leak</code> variable while using the default
values for all the other variables, we would nonetheless have been required to specify
the values for all the arguments:</p>
<pre class="jscode">var leaky = OtherImprovedRobot(1, 1, 'east', 0, true);</pre>
<p>There has to be a better way ...</p>
<h2>Named arguments</h2>
<p>In some languages, one can specify functions arguments by name rather than simply
by position.  <b>If</b> we could do so in Javascript, it would enable the following
notation:</p>
<pre class="jscode">var leaky = FictitiousImprovedRobot( leak = true );</pre>
<p><b>We can not do this.</b>  However, we can essentially achieve the same goal
using objects as parameters.  Consider the following:</p>
<pre class="jscode">ImprovedRobot.prototype = Object.create(UsedRobot.prototype);
ImprovedRobot.prototype.constructor = ImprovedRobot;

function ImprovedRobot(params)  {
    if (params === undefined) {
        params = {};   // empty object
    }
    UsedRobot.call(this, params.x, params.y, params.orientation, params.tokens);
    if (!params.leak) {
        this.is_leaky(false);
    }
    RUR.world.add_robot(this);
}

var leaky = new ImprovedRobot({"leak": true});
leaky.move();

var other = new ImprovedRobot({"x": 3, "y": 4});
other.move();

var rich = new ImprovedRobot({"tokens": "infinite"});
rich.turn_left();
rich.move();

var also_leaky = new ImprovedRobot({"leak": true, "x": 5});
also_leaky.move();
</pre>
<p>By passing an object as an argument, we can specify as many attributes as we desire.
All we have to do is to ensure that we know how to take care of <code>undefined</code>
values.</p>
<p>Try it!</p>


<a class="left-link" href="Javascript:void(0);" onClick="load_page('object')">Previous</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('fixed')">Next</a>