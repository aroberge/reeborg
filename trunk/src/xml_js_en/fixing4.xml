<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('fixing3')">Previous</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table of Contents</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('fixing5')">Next</a>
</nav>
<h1>Going left?</h1>
<p>Run the following program:</p>
<pre class="jscode">var Reeborg = new UsedRobot();
write( Reeborg.front_is_clear() );
write( Reeborg.right_is_clear() );</pre>
<p>As you can see in Reeborg's diary, Reeborg can determine correctly if there is a
wall in front or to its right.  Unfortunately, it can not do the same to its left:
the method <code>left_is_clear()</code> is not defined.  Let's change that.</p>
<p>We first start by having a look at how the existing two methods are defined
(notice the absence of <code>()</code> when looking at the source code):</p>
<pre class="jscode">var Reeborg = new UsedRobot();
view_source( Reeborg.front_is_clear );
view_source( Reeborg.right_is_clear );</pre>
<p>As you can see, these methods are defined using similarly named ones
from the object <code>RUR.world</code>.  If you execute the single line:</p>
<pre class="jscode">view_source( RUR.world.front_is_clear );</pre>
<p>you will see a rather complicated definition.  However, if you do the
same for </p>
<pre class="jscode">view_source( RUR.world.right_is_clear );</pre>
<p>you will see a much simpler one, which uses <code>front_is_clear</code>.
Have a closer look at the definition for <code>RUR.world.right_is_clear()</code>.
Do you see anything unusual about it?</p>
<h2>Optional arguments</h2>
<p>You may have notice that <code>__turn_right()</code> and <code>turn_left()</code>
are called with an argument (<code>true</code>) instead of without like
we have done up until now.  If you look at the definition of <code>turn_left</code> using</p>
<pre class="jscode">var Reeborg = new UsedRobot();
view_source( Reeborg.turn_left );</pre>
<p>you will see that it takes an optional argument, named <code>no_frame</code>.  Whenever
that argument is defined, the function returns <b>before</b> a new frame is added. Thus
the robot turns ... but that turn is not recorded.  Note that, instead of <code>true</code>,
 we could have passed any defined value such as
<code>false</code> or <code>42</code> and the result would have been the same.</p>
<h2>Your turn</h2>
<p>Fill in the missing code to enable Reeborg to see if there is a wall immediately
    to its left</p>
<pre class="jscode">ImprovedRobot.prototype.left_is_clear = function () {
    var result;
    this.turn_... (true);
    ... = this.front_is_clear();
    ...;
    return ...;
};

var Reeborg = new ImprovedRobot();
write( Reeborg.left_is_clear() );  // true or false?
Reeborg.turn_left();
write( Reeborg.left_is_clear() );  // true or false?</pre>
<p>Note that since we are implementing this as a robot method, instead of as
a world method the way <code>right_is_clear</code> was implemented, we use
<code>this</code> instead of <code>robot</code> inside the method definition.</p>
<p>Once you are done and you are satisfied that it works correctly,
add the correct test definition to your library and save it.</p>

<a class="left-link" href="Javascript:void(0);" onClick="load_page('fixing3')">Previous</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('fixing5')">Next</a>