<h1>Newspaper delivery revisited</h1>

<p>Let's go back to our newspaper delivery example; we'll consider
the delivery to Ms. Ada Lovelace in <span class="world">Newspaper 1</span>.
Below is a solution to that problem, with a few added comments.</p>

<pre class="jscode">
take("star");

// climb up first floor
turn_left();
move();
turn_left();
turn_left();
turn_left();
move();
move();

// climb up second floor
turn_left();
move();
turn_left();
turn_left();
turn_left();
move();
move();

// climb up third floor
turn_left();
move();
turn_left();
turn_left();
turn_left();
move();
move();

// get money
take_token();
take_token();
take_token();
take_token();
take_token();

// leave paper
put("star");

// turn around
turn_left();
turn_left();

// climb down floor
move();
move();
turn_left();
move();
turn_left();
turn_left();
turn_left();

// climb down floor
move();
move();
turn_left();
move();
turn_left();
turn_left();
turn_left();

// climb down floor
move();
move();
turn_left();
move();
turn_left();
turn_left();
turn_left();

// put money down.
put_token();
put_token();
put_token();
put_token();
put_token();</pre>

<p>This solution is quite long ... and it is easy to make mistakes when typing it.
We note however that there are quite a few repeated code segements for which we
could create functions.  We have already defined <code>turn_right()</code> and
<code>turn_around()</code>; let's use them and define a few others.</p>

<pre class="jscode">
function climb_up_one_floor() {
    turn_left();
    move();
    turn_right();
    move();
    move();
}

function climb_up_three_floors() {
    climb_up_one_floor();
    climb_up_one_floor();
    climb_up_one_floor();
}

function climb_down_one_floor() {
    move();
    move();
    turn_left();
    move();
    turn_right();
}

function climb_down_three_floors() {
    climb_down_one_floor();
    climb_down_one_floor();
    climb_down_one_floor();
}

function get_money() {
    take_token();
    take_token();
    take_token();
    take_token();
    take_token();
}

function put_money_down() {
    put_token();
    put_token();
    put_token();
    put_token();
    put_token();
}

// === End of definitions ===

take("star");
climb_up_three_floors();
get_money();
put("star"); // leave paper
turn_around();
climb_down_three_floors();
put_money_down();</pre>

<p>Each function contains no more than 5 instructions; it's much easier to verify that
each function does what it is supposed to do than verifying an entire list of commands
like we have previously.  Once we know that the functions do what they are supposed
to do, making use of them allow us to write a complete program in 7 more lines of code -
again, much easier to verify that it is right.  All together, using functions to avoid
repetitions, we end up with a shorter program that is also much easier to read.
</p><p>
It should be fairly simple to modify the above function definitions so that we could deliver a newspaper
to Mr. Babbage, in world <span class="world">Newspaper 2</span>. <b>Do it!</b></p>

<p>Later, we will see how we can write a single program, shorter than the above,
that will enable us to deliver newspapers to either Ms. Lovelace or Mr. Babbage.</p>