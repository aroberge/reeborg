import sys
from browser import window, doc
from highlight import insert_highlight_info

window['insert_highlight_info'] = insert_highlight_info
library = window['library']


def _write(data):
    doc["output-pre"].innerHTML += str(data)


def _write_err(data):
    doc["output-pre"].innerHTML += "<b style='color:red'>" + str(data) + "</b>"


sys.stdout.write = _write
sys.stderr.write = _write_err

initial_my_lib_dict_keys = []


def generic_translate_python(src, lib, lang_import):
    if not initial_my_lib_dict_keys:
        for key in lib.__dict__:
            initial_my_lib_dict_keys.append(key)
    exec(library.getValue(), lib.__dict__)
    exec(lang_import + "\n" + src)

    # cleanup to start from a clean slate next time
    new_keys = []
    for key in lib.__dict__:
        if key not in initial_my_lib_dict_keys:
            new_keys.append(key)
    for key in new_keys:
        del lib.__dict__[key]


class ReeborgError(Exception):
    def __init__(self, value):
        self.reeborg_says = value

    def __str__(self):
        return repr(self.reeborg_says)

window['ReeborgError'] = ReeborgError


def Help(obj):
    '''Simple help() replacement'''
    try:
        print(obj.__name__)
        print("   {}".format(obj.__doc__))
    except:
        pass
    for attr in dir(obj):
        if attr == "__class__":
            continue
        if hasattr(getattr(obj, attr), "__doc__"):
            if getattr(obj, attr).__doc__:
                print("\n{0}\n   {1}".format(attr, getattr(obj, attr).__doc__))
window['Help'] = Help
