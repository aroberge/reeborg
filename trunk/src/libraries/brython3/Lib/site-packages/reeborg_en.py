from browser import window

RUR = window.RUR

move = window.move
turn_left = window.turn_left
inspect = window.inspect
front_is_clear = window.front_is_clear
right_is_clear = window.right_is_clear
select_challenge = window.select_challenge
is_facing_north = window.is_facing_north
done = window.done
put = window.put
take = window.take
object_here = window.object_here
select_world = window.select_world
token_here = window.token_here
has_token = window.has_token
write = window.write
at_goal = window.at_goal
at_goal_orientation = window.at_goal_orientation
build_wall = window.build_wall
think = window.think
pause = window.pause
repeat = window.repeat
view_source = window.view_source
sound = window.sound
set_max_steps = window.set_max_steps
say = window.say


class _UsedRobot(object):
    def __init__(self, x=1, y=1, orientation='e', tokens=0):
        robot = RUR.robot.create_robot(x, y, orientation, tokens)
        self.body = robot
        RUR.world.add_robot(self.body)

    def move(self):
        RUR.control.move(self.body)

    def at_goal(self):
        return RUR.control.at_goal(self.body)

    def at_goal_orientation(self):
        return RUR.control.at_goal_orientation(self.body)

    def build_wall(self):
        RUR.control.build_wall(self.body)

    def front_is_clear(self, no_frame=False):
        return RUR.control.front_is_clear(self.body, no_frame=no_frame)

    def has_token(self):
        return RUR.control.has_token(self.body)

    def is_facing_north(self):
        return RUR.control.is_facing_north(self.body)

    def put(self, arg="token"):
        RUR.control.put(self.body, arg)

    def token_here(self):
        return RUR.control.token_here(self.body)

    def right_is_clear(self):
        return RUR.control.right_is_clear(self.body)

    def object_here(self):
        return RUR.control.object_here(self.body)

    def take(self, arg="token"):
        RUR.control.take(self.body, arg)

    def turn_left(self, no_frame=False):
        RUR.control.turn_left(self.body, no_frame=no_frame)


class ReeborgError(Exception):
    def __init__(self, value):
        self.reeborg_says = value

    def __str__(self):
        return repr(self.reeborg_says)

window['ReeborgError'] = ReeborgError


class UsedRobot(_UsedRobot):
    pass


def Help(obj):
    try:
        print(obj.__name__)
        print("   {}".format(obj.__doc__))
    except:
        pass
    for attr in dir(obj):
        if attr == "__class__":
            continue
        if hasattr(getattr(obj, attr), "__doc__"):
            if getattr(obj, attr).__doc__:
                print("\n{0}\n   {1}".format(attr, getattr(obj, attr).__doc__))
window['Help'] = Help
