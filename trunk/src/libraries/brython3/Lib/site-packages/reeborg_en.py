from browser import window

RUR = window.RUR

# RUR._x_ defined in commands.js
at_goal = RUR._at_goal_
at_goal_orientation = RUR._at_goal_orientation_
build_wall = RUR._build_wall_
front_is_clear = RUR._front_is_clear_
has_token = RUR._has_token_
is_facing_north = RUR._is_facing_north_
move = RUR._move_
put = RUR._put_
token_here = RUR._token_here_
right_is_clear = RUR._right_is_clear_
object_here = RUR._object_here_
prend = RUR._take_
turn_left = RUR._turn_left_
repeat = RUR._repeat_
set_max_steps = RUR._set_max_steps_
# defined in rur_utils.js
inspect = RUR.inspect
view_source = RUR.view_source
# defined in control.js
write = RUR.control.write
done = RUR.control.done
sound = RUR.control.sound
think = RUR.control.think
say = RUR.control.say
pause = RUR.control.pause
# defined in ui.js
select_world = RUR.ui.select_world
select_challenge = RUR.ui.select_challenge

# The following is the only language specific function which can only be used in monde.html,
# not when imported from world.html
try:
    verify = RUR.verify
except AttributeError:
    pass


class _UsedRobot(object):
    def __init__(self, x=1, y=1, orientation='e', tokens=0):
        robot = RUR.robot.create_robot(x, y, orientation, tokens)
        self.body = robot
        RUR.world.add_robot(self.body)

    def move(self):
        RUR.control.move(self.body)

    def at_goal(self):
        return RUR.control.at_goal(self.body)

    def at_goal_orientation(self):
        return RUR.control.at_goal_orientation(self.body)

    def build_wall(self):
        RUR.control.build_wall(self.body)

    def front_is_clear(self, no_frame=False):
        return RUR.control.front_is_clear(self.body, no_frame=no_frame)

    def has_token(self):
        return RUR.control.has_token(self.body)

    def is_facing_north(self):
        return RUR.control.is_facing_north(self.body)

    def put(self, arg="token"):
        RUR.control.put(self.body, arg)

    def token_here(self):
        return RUR.control.token_here(self.body)

    def right_is_clear(self):
        return RUR.control.right_is_clear(self.body)

    def object_here(self):
        return RUR.control.object_here(self.body)

    def take(self, arg="token"):
        RUR.control.take(self.body, arg)

    def turn_left(self, no_frame=False):
        RUR.control.turn_left(self.body, no_frame=no_frame)


class ReeborgError(Exception):
    def __init__(self, value):
        self.reeborg_says = value

    def __str__(self):
        return repr(self.reeborg_says)

window['ReeborgError'] = ReeborgError


class UsedRobot(_UsedRobot):
    pass
