from browser import window

RUR = window.RUR

avance = window.avance
tourne_a_gauche = window.tourne_a_gauche
examine = window.examine
rien_devant = window.rien_devant
rien_a_droite = window.rien_a_droite
selectionne_defi = window.selectionne_defi
face_au_nord = window.face_au_nord
termine = window.termine
depose = window.depose
prend = window.prend
objet_ici = window.objet_ici
selectionne_monde = window.selectionne_monde
jeton_ici = window.jeton_ici
a_des_jetons = window.a_des_jetons
ecrit = window.ecrit
au_but = window.au_but
au_but_orientation = window.au_but_orientation
construit_un_mur = window.construit_un_mur
pense = window.pense
pause = window.pause
repete = window.repete
voir_source = window.voir_source
son = window.son
nombre_de_commandes = window.nombre_de_commandes
dis = window.dis


class _UsedRobot(object):
    def __init__(self, x=1, y=1, orientation='e', jetons=0):
        robot = RUR.robot.create_robot(x, y, orientation, jetons)
        self.body = robot
        RUR.world.add_robot(self.body)

    def avance(self):
        RUR.control.move(self.body)

    def au_but(self):
        return RUR.control.at_goal(self.body)

    def au_but_orientation(self):
        return RUR.control.at_goal_orientation(self.body)

    def construit_un_mur(self):
        RUR.control.build_wall(self.body)

    def rien_devant(self):
        return RUR.control.front_is_clear(self.body)

    def a_des_jetons(self):
        return RUR.control.has_token(self.body)

    def face_au_nord(self):
        return RUR.control.is_facing_north(self.body)

    def depose(self, arg="jeton"):
        RUR.control.put(self.body, arg)

    def jeton_ici(self):
        return RUR.control.token_here(self.body)

    def rien_a_droite(self):
        return RUR.control.right_is_clear(self.body)

    def objet_ici(self):
        return RUR.control.object_here(self.body)

    def prend(self, arg="token"):
        RUR.control.take(self.body, arg)

    def tourne_a_gauche(self):
        RUR.control.turn_left(self.body)


class ReeborgError(Exception):
    def __init__(self, value):
        self.reeborg_says = value

    def __str__(self):
        return repr(self.reeborg_says)

window['ReeborgError'] = ReeborgError


class RobotUsage(_UsedRobot):
    pass


def Help(obj):
    try:
        print(obj.__name__)
        print("   {}".format(obj.__doc__))
    except:
        pass
    for attr in dir(obj):
        if attr == "__class__":
            continue
        if hasattr(getattr(obj, attr), "__doc__"):
            if getattr(obj, attr).__doc__:
                print("\n{0}\n   {1}".format(attr, getattr(obj, attr).__doc__))
window['Help'] = Help
