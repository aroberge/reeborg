<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('array2')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('random')">Suivant</a>
</nav>

<h1>Opérateur modulo</h1>
<p>Si vous avez un robot dans une orientation donnée, vous savez que si ce
    robot fait 4 virages à gauche consécutifs il se retrouvera dans la
    même orientation qu'il avait au départ; les virages à gauche sont
    donc des opérations <em>cycliques</em>, c'est-à-dire des opérations
    dont l'effet répétées fait en sorte que l'état du départ (ou tout autre)
    se répète d'une façon périodique. </p>
<p>Imaginez que nous voulons écrire une méthode comme <code>tourne_à_gauche</code>
pour un robot ayant une orientation correspondant à l'un des quatre points
cardinaux:
<code>est</code>, <code>nord</code>, <code>ouest</code> et <code>sud</code>.
Une partie du code pourrait être constituée de blocs <code>if/else</code>:</p>
<pre class="jscode">if (orientation === est) {
    orientation = nord;
} else if (orientation === nord) {
    orientation = ouest;
} else if (orientation === ouest) {
    orientation = sud;
} else {  // orientation === sud
    orientation = est;
}</pre>
<p>ou on pourrait utiliser un énoncé <code>switch</code> (que nous expliquerons dans une autre leçon plus tard)
</p>
<pre class="jscode">switch (orientation) {
    case est:
        orientation = nord;
        break;
    case nord:
        orientation = ouest;
        break;
    case ouest:
        orientation = sud;
        break;
    case sud:
        orientation = est;
        break;
}</pre>
<p>Ces deux façons de faire les choses pourraient faire l'affaire et
    elles sont assez lisibles.  Cependant, si on voulais ajouter des
    orientations intermédiaires, tells que <code>nord_est</code>
    (à mi-chemin entre <code>nord</code> et <code>est</code>) ou même
    <code>nord_nord_est</code> (à mi-chemin entre <code>nord</code> et <code>nord_est)</code>,
<em>etc</em>, ça nous prendrait un nombre énorme de lignes de code pour obtenir le résultat
final.  Plus le nombre de lignes augmente, et plus il y a d'endroits possibles pour que se
glissent des erreurs.   Heureusement, il existe une façon plus concise d'effectuer des
opérations cycliques en utilisant l'opérateur modulo, <code>%</code>.</p>
<h2>Divisions des entiers</h2>
<p>Lorsque vous avez appris les divisions, vous avez tout d'abord vu la division des nombres
    entiers:</p>
<ul><li>8 divisé par 2 est égal à 4</li>
<li>8 divisé par 4 est égal à 2</li>
<li>8 ne peut pas être divisé par 3</li></ul>
<p>Puis, tout juste avant de voir les fractions, vous avez appris la notion de "reste" </p>
<ul><li>8 divisé par 2 est égal à 4 (avec un reste de 0)</li>
<li>8 divisé par 3 est égal à 2 (avec un reste de 2)</li>
<li>8 divisé par 5 est égal à 1 (avec un reste de 3)</li>
<li><em>etc.</em></li></ul>
<p>In Javascript, l'opérateur modulo repréenté par le symbole <code>%</code> correspond au
reste d'une division de deux entiers.</p>
<pre class="jscode">8 % 5 = 3</pre>
<p>Exécutez le programme suivant et observez le résultat dans le journal de Reeborg. </p>
<pre class="jscode">for (var i = 0; i < 10; i++) {
    écrit( i % 3);
}
</pre>
<p>Comme vous pouvez le constater, le résultat passe, de façon cyclique, par les valeurs 0, 1 et 2.
</p>
<h2>Modulo et virages à gauche</h2>
<p>Supposons que nous définissons ce qui suit: </p>
<pre class="jscode">est = 0;
nord = 1;
ouest = 2;
sud = 3;</pre>
<p>On a alors évidemment:</p>
<pre class="jscode">nord = est + 1;
ouest = nord + 1;
sud = ouest + 1;</pre>
<p>Malheureusement, <code>sud + 1 = 4</code> n'est pas égal à <code>est</code>.
Cependant, <code>4 % 4 = 0 = est</code>.  Vous pouvez également vérifier que:</p>
<pre class="jscode">nord = (est + 1) % 4;
ouest = (nord + 1) % 4;
sud = (ouest + 1) % 4;
est = (sud + 1) % 4;</pre>
<p>Donc, nous pourrions effectuer un virage à gauche de la façon suivante: </p>
<pre class="jscode">orientation ++;  // ajoute 1
orientation %= 4;  // équivalent à:  orientation = orientation % 4;</pre>
<p>Vérifiez en exécutant le programme suivant:</p>
<pre class="jscode">var orientation = 0;
for (var i = 0; i < 12; i++ ){
    orientation++;
    orientation %= 4;
    écrit(orientation);
}
</pre>
<h2>À votre tour</h2>
<p>Pour des virages à droite, il faudrait changer d'orientation de façon
    cyclique dans le sens inverse: 3, 2, 1, 0, 3, ...  Essayez de faire
    ceci en utilisant l'opérateur de décrémentation </p>
<pre class="jscode">orientation--;  // soustrait 1</pre>
<p>ou en utilisant le fait que trois virages à gauche sont équivalents à
    un virage à droite:</p>
<pre class="jscode">orientation += 3;</pre>
<p>Vous verrez que seulement une de ces deux approches donne le résultat
    souhaité en vertu d'une propriété de l'opérateur modulo en Javascript
    lorsqu'il opère sur les nombres négatifs.</p>
<h2>Lorsque vous aurez terminé ...</h2>
<p>Exécutez le programme suivant et examinez le résultat dans le journal de Reeborg
</p>
<pre class="jscode">var Reeborg = new RobotUsagé();
voir_source(Reeborg.tourne_à_gauche);
voir_source(Reeborg.__turn_right);</pre>
<p>Vous devriez être maintenant en mesure de comprendre ce qui a été fait par les créateurs
du monde de Reeborg.</p>

<a class="left-link" href="Javascript:void(0);" onClick="load_page('array2')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('random')">Suivant</a>

