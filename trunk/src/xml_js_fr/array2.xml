<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('array')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('remainder')">Suivant</a>
</nav>

<h1>Plusieurs robots ... encore</h1>
<h2>Mais auparavant, en passant ....</h2>
<p>J'ai mentionné qu'il était utile d'ajouter des commentaires pour expliquer
    <b>pourquoi</b> quelque chose est fait d'une certaine façon dans un programme
    informatique; le <b>comment</b> devrait être clair par la façon dont le code
    lui-même est écrit.</p>
<p>Un des problèmes avec les commentaires est qu'il n'y a aucune façon de s'assurer
    qu'ils sont valables et qu'ils reflètent le but d'un programme parce que l'ordinateur les ignore.
    Souvent, un bogue est noté, le code est corrigé ... mais les commentaires ne le sont pas.
    Cette situation est encore plus problématique pour la <em>documentation</em> d'un programme,
    telle que celle fournie par ces leçons, parce que les leçons sont dans des fichiers totalement
    découplés du code et qu'il n'y a aucun lien entre les deux.  En partie pour cette raison,
    je vais parfois vous demander d'utiliser <code>voir_source()</code> ou <code>écrit()</code>
    ou <code>examine()</code> pour apprendre comment une certaine méthode de Reeborg est
    écrite ce qui vous permet de voir <b>exactement</b> de quelle façon le code <b>actuel</b>
    a été organisé, et non une version précédente.</p>
<p>Dans cette leçon, je vais inclure quelques lignes de code du monde de Reeborg telles
    qu'elles existaient au moment où j'ai écrit la leçon.  Il est possible qu'il existe
    de petites différences entre la version présentée ici et la version actuelle.  Cependant,
    vous pouvez toujours utiliser <code>voir_source()</code>, etc., pour soit confirmer
    que le code présenté dans les leçons reflète la réalité ou pour voir ce qui devrait
    être une meilleure façon d'accomplir le but recherché!  </p>
<h2>Robot actions: different ways</h2>
<p>Sélectionnez le monde <span class="world">Vide</span> et exécutez le programme suivant,
de préférence une instruction à la fois en utilisant {step_button}.
Quel robot <code>avance()</code> le dernier?</p>
<pre class="jscode">var Reeborg = new RobotUsagé();
var Erdna = new RobotUsagé(2,2);

Reeborg.avance();
RUR.world.robots[0].avance();

Erdna.avance();
RUR.world.robots[1].avance();

avance();</pre>
<p>Si vous voulez, vous pouvez inclure la ligne </p>
<pre class="jscode">DEBUG.ON = true;</pre>
<p>pour voir de l'information supplémentaire paraître au haut du monde de Reeborg. </p>
<p>Ensuite, assurez-vous que le journal de Reeborg soit visible et exécutez l'instruction
    suivante:</p>
<pre class="jscode">voir_source(avance);</pre>
<p>Cette fonction devrait inclure une seule instruction  indiquant
    que le premier robot (celui avec un indice égal à zéro) est celui qui devrait avancer.
</p>
<p>Ensuite, exécutez l'instruction:</p>
<pre class="jscode">voir_source(RobotUsagé);</pre>
<p>Vous voyez que ceci inclus l'instruction</p>
<pre class="jscode">RUR.world.add_robot(this);</pre>
<p>signifiant</p>
<pre class="jscode">RUR.monde.ajoute_robot(this);</pre>
<p>qui suggère fortement que nous <em>additionnons un robot au monde</em>.
Ici, <small>et ce n'est pas évident</small>, <code>this</code> réfère au
<code>RobotUsagé</code> qui a été "créé" lors de l'invocation de
<code>new RobotUsagé()</code>.
Continuons notre exploration plus à fond du code en exécutant:</p>
<pre class="jscode">voir_source(RUR.world.add_robot);</pre>
<p>Une des lignes est </p>
<pre class="jscode">this.robots.push(robot);</pre>
<p>où <code>this</code> réfère au <code>RUR.world</code> ("monde") et
<code>robot</code>, sans "s", réfère à <em>l'autre</em> variable <code>this</code>
qui a été passé comme argument de la méthode <code>add_robot</code>.</p>
<p><b>J'admet que l'utilisation de <code>this</code> en Javascript peut être mélangeante...</b>
Cependant, ce sur quoi je voulais surtout attirer votre attention ici est le fait que la
méthode <code>push</code> est utilisée, méthode qui, nous l'avons vu plus tôt, ajoute un élément
à un tableau Javascript.</p>
<p>Qu'est-ce que tout ceci veut dire ...</p>
<p>Lorsqu'un programmeur, comme vous, écrit</p>
<pre class="jscode">robot_name = new RobotUsagé()</pre>
 <p>un nouveau robot est créé <b>et</b> il est ajouté à un tableau.
 Donc, on peut référer à ce robot soit par son "nom" ou par l'élément
 du tableau qui lui est propre.  </p>
<p>Pourquoi les créateurs du monde de Reeborg on fait ceci?...</p>
<p>La raison est que lorsque <b>vous</b> écrivez un programme, vous choisissez
les noms à utiliser pour nommer vos robots.  Les programmeurs qui ont conçu le
monde de Reeborg n'avaient aucune façon de savoir quels noms vous utiliseriez pour
identifier un robot donné.  Par contre, ils pouvaient tenir compte du nombre
de robots créés, via <code>RUR.world.robots.length</code>,
et enregistrer la position et l'orientation de chaque robot à chaque "image" (<em>frame</em>) en
utilisant l'indice correspondant du tableau, puis montrer le résultat une image à la fois
pour créer l'animation.</p>
<p>Lorsque vous sélectionnez un monde qui a déjà un robot présent, ce robot n'a pas
    de nom ... mais c'est celui dont l'indice du tableau <code>RUR.world.robots</code>
    est égal à zéro, et c'est ce qui nous permet d'utiliser des instructions toutes
    simples, comme <code>avance()</code> ou <code>tourne_à_gauche()</code>.</p>
<h2>Pas de robot?</h2>
<p><b>Qu'arrive-t-il si vous utilisez <code>avance()</code> dans le monde <span class="world">Vide</span>
sans créer un <code>new RobotUsagé</code> en premier?</b></p>
<p>Lorsque vous aurez essayé de faire avancer un robot absent, sélectionnez un monde
    <b>avec</b> un robot déjà présent, et exécutez le code suivant, tout d'abord
    en gardant la première ligne comme commentaire, puis exécutez-le à nouveau
    en enlevant les <code>//</code> pour que la première ligne soit exécutée.</p>
<pre class="jscode">RUR.world.robots.pop();
//var Reeborg = new RobotUsagé(4,4);
avance();</pre>
<p>Si le résultat ne vous parait pas logique, assurez-vous de lire à nouveau cette leçon-ci ainsi que
    la précédente.</p>
<a class="left-link" href="Javascript:void(0);" onClick="load_page('array')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('remainder')">Suivant</a>

