<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('logical')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('random2')">Suivant</a>
</nav>

<h1>Énoncé switch</h1>

<p>En jouant à em>roche-papier-ciseaux</em>, chaque joueur peut choisir une des trois "armes" possibles
ce qui mène à 9 combinaisons différentes::
<ul><li>roche et roche</li>
<li>roche et papier</li>
<li>roche et ciseaux</li>
<li>papier et roche</li>
<li>...</li></ul>
Avec ce que vous avez vu jusqu'à maintenant, vous voudriez probablement utiliser
une combinaisons d'énoncés <code>if/else</code>, ce qui fonctionnerait, mais
il y a une façon un peu plus simple et facile à lire dans ce cas-ci: c'est
l'utilisation d'énoncés <code>switch</code>.

</p>
<p>Avant de présenter les énoncés  <code>switch</code>, commençons par voir
comment on pourrait déterminer le résultat d'une partie.  Supposons
que nous avons un ordinateur (joueur 1) contre un humain (joueur 2). On pourrait
combiner leur sélection respective pour un seul match de la façon suivante:</p>

<pre class="jscode">var joueur1, joueur2, match;
joueur1 = choix_ordinateur();
joueur2 = choix_humain();
match = joueur1 + " " + joueur2;
</pre>
<p>Par exemple, si <code>match</code> a la valeur <code>"roche ciseaux"</code>,
on aura que le joueur 1 (l'ordinateur) aura gagné.
Similairement, si c'est <code>"roche papier"</code>, c'est le joueur 2 qui aura
gagné.   En utilisant ceci, voici comment on écrit l'énoncé <code>switch</code>
pour déterminer le gagnant dans les 9 cas possibles: </p>

<pre class="jscode">
switch (match){
    case "roche papier":
        alert("Joueur 2 gagne");
        break;
    case "roche ciseaux":
        alert("Joueur 1 gagne");
        break;
    case "papier roche":
        alert("Joueur 1 gagne");
        break;
    case "papier ciseaux":
        alert("Joueur 2 gagne");
        break;
    case "ciseaux roche":
        alert("Joueur 2 gagne");
        break;
    case "ciseaux papier":
        alert("Joueur 1 gagne");
        break;
    case "roche":             // match nul
    case "ciseaux ciseaux":
    case "papier papier":
        alert("Personne ne gagne");   // pas besoin de "break" ici
                               // puisqu'aucun code n'est exécuté ci-dessous
    default:
        // le cas "default" (défaut en français) représente tous
        // les autres possibilités - donc des parties invalides.
        // Comme nous avons déjà alerté le joueur si un choix est invalide
        // il n'y a rien d'autre à faire ici.
}
</pre>
<p>Dans le code ci-dessus, la valeur de la vriable <code>match</code> détermine quel <em> bloc cas</em>
(<code>case</code>) sera exécuté: le code débute là où l'<b>étiquette</b> d'un énoncé <code>case</code>
a la même valeur que la variable <code>match</code>.  À partir de ce point, <b>toutes</b> les lignes
suivantes sont exécutées jusqu'à ce qu'un énoncé <code>break</code> soit rencontré; dans ce cas, on sort
complètement du bloc de l'énoncé <code>switch</code>.</p>
<p>Même si ce n'est pas requis, c'est toujours préférable d'inclure un énoncé <code>default</code>.
Le code qui suit cet énoncé est exécuté si aucune étiquette des énoncés <code>case</code> n'est
égale à la valeur de la variable <code>match</code>.  Normalement, on inclus quelque chose
comme un dialogue <code>alert()</code> dans ce cas pour nous aider à identifier les bogues: selon
notre hypothèse, l'énoncé <code>default</code> ne devrait jamais être atteint et si on avait une
boîte <code>alert</code> qui était activée, ceci indiquerait sûrement la présence d'un bogue.
</p>

<h2>À votre tour!</h2>
<p>C'est le temps de combiner tout ce que nous avons vu et de faire un programme pour le jeu au
    complet.  Lorsque vous aurez terminé et que le tout fonctionnera correctement, vous devriez
    considérer une ou plusieurs des améliorations suivantes:</p>
<ul><li>Inclure la possibilité d'avoir plusieurs matchs, comme on l'a fait pour l'autre jeu.</li>
<li>Inclure une variable pour chaque joueur qui tient compte du nombre de parties gagnées, et ajouter
    cette information dans le message à chaque tour.</li>
</ul>
</p>
<h2>Voulez-vous relever un défi?</h2>
<p>Si vous voulez un jeu un peu plus difficile, écrivez un programme pour la version
<a href="http://fr.wikipedia.org/wiki/Pierre-feuille-ciseaux">Pierre-Papier-Ciseaux-Lézard-Spock</a>.</p>
<a class="left-link" href="Javascript:void(0);" onClick="load_page('logical')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('random2')">Suivant</a>