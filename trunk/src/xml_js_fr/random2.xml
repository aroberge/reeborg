<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('switch')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('tantrum')">Suivant</a>
</nav>

<h1>Évasions aléatoires</h1>

<p>Dans les deux jeux que nous avons faits nous avons vu comment utiliser la méthode
    <code>random()</code> de Javascript pour faire des choix arbitraires.  Voyons
    comment utiliser ceci dans le monde de Reeborg.</p>

<p>Sélectionnez le monde <span class="world">Labyrinthe&nbsp;1</span>.  Plutôt que
d'utiliser une approche logique, Reeborg va faire des choix totalement arbitraires
pour tenter de sortir du labyrinthe.  Voici une description de l'algorithme que
Reeborg va utiliser:</p>

<ul>Pendant que Reeborg est à l'intérieur du labyrinthe
<li>il va décider, au hasard, de soit avancer, tourner à gauche ou tourner à droite. </li>
<li>Si sa décision est d'avancer, Reeborg vérifiera s'il y a un mur devant lui pour
    éviter de s'y heurter.</li>
</ul>

<p>Notre programme utilise les techniques que nous avons vu jusqu'ici.
    Si Reeborg décide d'avancer, il vérifiera aussi s'il y a un mur devant lui;
    ceci sera fait en utilisant l'opérateur logique "et", <code>&amp;&amp;</code>.
    On décrit parfois cette approche comme étant <em>réfléchir avant d'agir</em>.
</p>
<pre class="jscode">var résultat;
pense(0);

while (!au_but()) {
    résultat = Math.random();
    if (résultat < 1/3 && rien_devant()){
        avance();
    } else if (résultat < 2/3 ) {
        tourne_à_droite();
    } else {
        tourne_à_gauche();
    }
}
</pre>

<p>Nous avons fait en sorte que Reeborg se déplace aussi rapidement que possible en
    utilisant <code>pense(0)</code> pour réduire à zéro le temps pris pour réfléchir
    entre deux actions, ceci afin de l'aider à sortir rapidement du labyrinthe.
    Voici un exemple d'une tentative fructueuse d'exécution de ce programme: </p>
<img src="src/images/random_maze.png" alt="random escape from maze"/>
<p>Si vous exécutez ce programme plusieurs fois, vous constaterez probablement que Reeborg
    ne réussit pas toujours à sortir: il se fatigue et abandonne au bout de 1000 actions
    (comme <code>avance()</code> et <code>tourne_à_gauche()</code>).  Vous pouvez augmenter
    le nombre d'actions que Reeborg va effectuez, disons à 10000, en écrivant </p>
<pre class="jscode">RUR.world.max_steps = 10000;</pre>
<p>comme première instruction de votre programme.  Le nombre maximal d'actions permises
    a été mis en place afin d'aider à empêcher les boucles infinies.</p>

<p>Avant de voir une façon différente d'utiliser les décisions aléatoires pour
    s'échapper d'un labyrinthe, nous avons besoin d'apprendre au sujet des crises de Reeborg.</p>

<a class="left-link" href="Javascript:void(0);" onClick="load_page('switch')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('tantrum')">Suivant</a>
