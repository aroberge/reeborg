<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('continue')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('fixing1')">Suivant</a>
</nav>

<h1>Ajouter des méthodes</h1>

<p>Nous avons déjà vu comment ajouter des méthodes à une "classe" d'objets
    en modifiant le prototype.  Dans cette leçon, nous allons revoir ceci ainsi
    qu'une autre façon de modifier les objets individuels.
</p>
<p>Supposons qu'on veuille définir une méthode qui instruit les robots
    à avancer de deux pas; appelons cette méthode <code>avance2</code>.
    Selon ce qu'on avait vu précédemment, on peut procéder ainsi:</p>
<pre class="jscode">var robot1 = new RobotUsagé(1, 2);
RobotUsagé.prototype.avance2 = function () {
    this.avance();
    this.avance();
};

var robot2 = new RobotUsagé(1, 3);

robot1.avance2();
robot2.avance2();</pre>
<p><b>Essayez</b> et vérifier que tous robots, tel que <code>robot1</code>,
qui ont été créés <b>avant</b> l'ajout de la méthode sont tout aussi capables
de l'utiliser que ceux qui ont été créés après l'ajout de la méthode</p>
<h2>Méthode pour un objet individuel</h2>
<p>Plutôt que de modifier le prototype, on peut ajouter une méthode à un
    <em>objet individuel</em>.  Par exemple, nous allons ajouter deux méthodes
    différentes <em>ayant le même nom</em> à deux robots différents.</p>
<pre class="jscode">var robot1 = new RobotUsagé(1, 2);
var robot2 = new RobotUsagé(1, 3);

robot1.avance2 = function () {
    this.a_une_fuite(false);
    this.avance();
    this.avance();
};

robot2.avance2 = function () {
    this.avance();
    this.avance();
};


robot1.avance2();  // pas de fuite!
robot2.avance2();
</pre>
<p>Ceci fonctionne également même si on change le prototype: les changements
    faits à un objet spécifique prennent préséance.</p>

<pre class="jscode">var robot1 = new RobotUsagé(1, 2);
var robot2 = new RobotUsagé(1, 3);

robot1.avance2 = function () {
    this.a_une_fuite(false);
    this.avance();
    this.avance();
};

RobotUsagé.prototype.avance2 = function () {
    this.avance();
    this.avance();
};

robot1.avance2(); // pas de fuite!
robot2.avance2();
</pre>

<p><b>Assurez-vous d'exécuter les deux exemple précédents!</b></p>

<h2>Comment ça fonctionne?</h2>
<p>Lorsque le code suivant </p>
<pre class="jscode">objet_spécifique.méthode();</pre>
<p>est exécuté, Javascript  vérifie en premier si <code>méthode</code> a été
défini pour <code>objet_spécifique</code>; si la réponse est non, Javascript
examine le prototype à partir duquel cet objet a été défini.  Dans notre cas,
ce serait <code>RobotUsagé.prototype</code>.  Si la méthode n'a pas été définie
pour ce prototype, mais si la "classe" <code>RobotUsagé</code> a été définie à partir
d'un autre prototype, comme c'est le cas pour le monde de Reeborg, la recherche d'une méthode
appropriée se poursuit avec l'autre prototype qui, dans ce cas, serait <code>RUR.Robot.prototype</code>.</p>
<p>Nous verrons ceci plus en détails dans les prochaines leçons.</p>

<a class="left-link" href="Javascript:void(0);" onClick="load_page('continue')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('fixing1')">Suivant</a>

