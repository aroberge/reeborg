<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('modify')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('fixing2')">Suivant</a>
</nav>
<p>Dans les leçons qui suivent, vous devriez toujours sélectionner le monde
    <span class="world">Vide</span> pour exécuter vos programmes.
</p>
<h1>Réparer Reeborg</h1>
<p>Comme nous l'avons vu précédemment, les créateurs du monde de Reeborg,
    comme plusieurs autres programmeurs incompétents,
    disent que <em>les "bogues" de Reeborg n'en sont pas vraiment: ce sont
des caractéristiques utiles de son programme.</em>
</p>
<ol>
<li>Reeborg a une fuite d'huile.  De telle fuite sont dommageables pour
    l'environnement et pas très pratique pour Reeborg qui doit refaire le
    plein de façon périodique, lorsqu'il n'est pas occupé à accomplir
    les tâches que vous lui confiez.   Les créateurs de Reeborg
    prétendent qu'en fait il s'agit d'une caractéristique utile puisque
    ceci vous permet de suivre Reeborg à la trace, comme tout bon
    programmeur doit pouvoir faire dans ses programmes.
</li>
<li>Le mécanisme de direction de Reeborg n'est pas utilisé correctement
    par le logiciel de Reeborg, ce qui fait que ce dernier ne peut que
    tourner vers la gauche.  Les créateurs de Reeborg, une fois de plus,
    prétendent qu'il s'agit là d'une caractéristique utile puisque ceci
    vous a permis d'apprendre le concept de <b>fonctions</b>.
    Reeborg n'est pas d'accord. </li>
<li>Reeborg possède une boussole lui permettant de déterminer dans quelle
    direction il va.  Malheureusement, une fois de plus, le logiciel de
    Reeborg a un bogue qui fait en sorte que Reeborg peut seulement dire
    s'il se dirige vers le nord ... ou non.  </li>
<li>Reeborg peut voir s'il y a un mur qui bloque son passage devant lui,
    et peut tourner la tête pour voir s'il y a un mur à sa droite.
    Malheureusement une <em>limitation</em> de son programme (ce qui
    est une expression malhonnête que les manufacturiers utilisent pour
    éviter de dire que leurs programmes ont des bogues) empêche Reeborg
    de déterminer correctement si un mur se trouve immédiatement à sa
    gauche.</li>
</ol>
</em>

<p>Lorsque des manufacturiers fabriquent des produits qui sont pleins de
    défauts, ils adoptent une des deux stratégies suivantes:</p>
<ol><li>Ils peuvent annoncer un  <em>rappel</em> de leur produit, demandant
aux consommateurs de rapporter le produit défectueux pour qu'il puisse être réparé.
Mais ceci peut coûter cher au manufacturier.</li>
<li>Ils peuvent créer une version <b>nouvelle et améliorée</b> de leur produit
et tenter de vendre cette nouvelle version aux consommateurs qui ne sont pas satisfaits
de leur premier achat.</li></ol>

<p>Les programmeurs informatiques qui utilisent Javascript ont des options semblables. </p>
<ol><li>Ils peuvent modifier le prototype des objets, changeant ainsi le comportement
    des objets existants ainsi que des objets futurs.</li>
<li>Ils peuvent créer de nouvelles "classes" d'objets qui partagent les bons
    attributs des objets précédents mais qui incluent des améliorations.</li></ol>
<p>Nous allons suivre cette deuxième approche et ne pas modifier <code>RobotUsagé</code>
de telle sorte que le fonctionnement des programmes que vous avez déjà écrit ne sera
pas modifié.  Pour l'instant, ajoutez les lignes de code suivantes dans
votre bibliothèque (et sauvegardez le tout) </p>
<pre class="jscode">RobotAmélioré.prototype = Object.create(RobotUsagé.prototype);
RobotAmélioré.prototype.constructor = RobotAmélioré;

function RobotAmélioré(x, y, orientation, jetons)  {
    RobotUsagé.call(this, x, y, orientation, jetons);
    RUR.world.add_robot(this);
}</pre>
<p>La première ligne fait en sorte que le prototype de <code>RobotAmélioré</code>
sera une copie de celle de <code>RobotUsagé</code>. La deuxième ligne spécifie
quelle fonction (le constructeur) sera invoquée lorsqu'un nouveau <code>RobotAmélioré</code>
sera créé.  Ces deux lignes de code sont la façon recommandée de faire <em>hériter</em>
les attributs et méthodes d'un prototype existant.
 </p>
<p>Le reste du code définit le <em>constructeur</em>.  Ce code est
spécifique au monde de Reeborg.  Le constructeur est défini de telle sorte qu'un
 <code>RobotUsagé</code> est tout d'abord créé à l'endroit voulu, puis il ajoute l'information
 requise pour "informer" le monde de Reeborg que ce robot existe, ce qui est requis pour
 qu'il puisse apparaître à l'écran. </p>
<p>Vous devriez tester ce code en écrivant ce qui suit dans l'onglet <b>code</b></p>
<pre class="jscode">var Reeborg = new RobotAmélioré();
Reeborg.avance();
Reeborg.tourne_à_gauche();</pre>
<p><b>Allez-y!</b></p>


<a class="left-link" href="Javascript:void(0);" onClick="load_page('modify')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('fixing2')">Suivant</a>