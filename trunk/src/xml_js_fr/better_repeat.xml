<nav>

<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('while_num')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('other_repeat')">Suivant</a>

</nav>
<h1>Un meilleur <b>répète()</b></h1>

<p><em>N.B. Cette leçon couvre des concepts très avancés.  Si vous ne comprenez pas tout, ceci ne devrait pas
    vous empêcher de continuer avec les autres leçons.</em></p>

<p>Vous avez vu comment on pouvait définir notre propre fonction équivalente à <code>répète()</code>,
fonction qui permet d'éviter les répétitions de lignes de code.  Par exemple, si on veut simuler
un virage à droite, on peut écrire <code>répète( tourne_à_gauche,&nbsp;3)</code> au lieu
de répéter trois fois la même instruction.  Le problème avec cette approche en général est que
ceci n'améliore pas la lisibilité du code puisqu'on n'introduit pas de noms descriptifs.
Une meilleure approche que nous avons vu est d'utiliser <code>répète()</code> mais de
 cacher ces répétitions à l'intérieur d'une fonction:</p>
<pre class="jscode">function tourne_à_droite (){
    répète(tourne_à_gauche, 3);
}</pre>
<p>Cependant, on peut faire ceci d'une autre façon.  Tout d'abord, revoyons la définition
    de <code>répète()</code>:</p>
<pre class="jscode">function répète (fn, n){
    for (var i = 0; i < n; i++) {
        fn();
    }
}</pre>
<p>Ensuite, rappelons-nous l'effet d'un énoncé <code>return</code> à l'intérieur d'une
fonction.  Par exemple, si on a</p>
<pre class="jscode">function fonction_quelconque (){
    // quelques lignes de code
    return quelque_chose;
}

var a = fonction_quelconque();
// "a" sera maintenant un synonyme de "quelque_chose"</pre>
<p>Tout comme on peut avoir des fonctions comme arguments d'autres fonctions, on peut
    <em>retourner</em> des fonctions!</p>
<pre class="jscode">function meilleur_répète (fn, n){
    return function () {
        for (var i = 0; i < n; i++){
            fn();
        }
    };
}

// on l'utilise pour définir un virage à droite
var mon_virage_à_droite = meilleur_répète(tourne_à_gauche, 3);

mon_virage_à_droite();  // et on l'utilise
</pre>

<p>Essayez-le!</p>
<h2>Extension de cette idée</h2>

<p>En plus d'utiliser cette approche pour des répétions, on peut l'utiliser
    pour des conditions devant être vérifiées.</p>

<pre class="jscode">function faire_pendant(fn, condition) {
    return function() {
        while (condition()) {
            fn();
        }
    };
}

var marche_au_mur = faire_pendant(avance, rien_devant);
marche_au_mur();
</pre>

<p>Vérifiez que ça fonctionne.</p>

<p>Lorsque vous aurez terminé, vous pourrez tenter de définir une fonction
 <code>faire_si_non(fn,&nbsp;condition)</code> où nous faisons quelque chose jusqu'à ce
 qu'une condition ne soit <b>pas</b> satisfaite.</p>

<a class="left-link" href="Javascript:void(0);" onClick="load_page('while_num')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('other_repeat')">Suivant</a>
