<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('maze_again')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('keywords')">Suivant</a>
</nav>

<h1>Le mot-clé <code>with</code></h1>
<p>Si vous lisez d'autres tutoriels ou exemples de code Javascript, vous verrez peut-être le
    mot-clé <code>with</code> (mot anglais signifiant <em>avec</em>).  Nous recommandons que
    vous ne l'utilisiez pas dans vos programmes. Cependant, nous donnons un bref aperçu de
    son utilisation dans l'exemple suivant. </p>
<pre class="jscode">// sélectionnez un monde où un robot est présent.
var Reeborg = new RobotUsagé(2,4); // créer un second robot
avance();   // fait référence au premier
Reeborg.avance(); //  ... au deuxième

// essayez d’exécuter le code suivant
/* with (Reeborg) {
    avance();
    avance();
}
*/  // ça ne marchera pas!
</pre>

<p>Le monde de Reeborg exige que le code Javascript soit exécuté en <b>mode strict</b>.
Ceci est fait par l'insertion automatique de la chaîne de caractères</p>
<pre class="jscode">"use strict";
</pre>
<p>comme première ligne du code que vous exécutez. </p>
<p>
    Le mode strict a été créé dans le but de prévenir l'apparition de certaines erreurs
    observées dans plusieurs programmes écrit en Javascript.   Normalement, le mode strict
    n'est pas utilisé par défaut ... mais ceci a été fait ici dans le but de vous aider
    à apprendre de bonnes habitudes de programmation en Javascript.
</p>
<h2>Vivons dangereusement</h2>
<p>Si vous écrivez</p>
<pre class="jscode">"no strict";
</pre>
<p>comme toute première ligne du code dans l'éditeur, votre programme sera exécuté
    dans le mode <b>normal</b> de Javascript, c'est-à-dire sans que le mode strict
    ne soit activé.  De plus, normalement jshint est utilisé pour identifier des erreurs;
    lorsque le mode strict est désactivé, jshint est également désactivé.  À noter que
    tout ceci est une caractéristique unique du monde de Reeborg.
    Voici un exemple qui suppose que vous avez déjà un robot de présent:</p>
<pre class="jscode">"no strict";
Reeborg = new RobotUsagé(2,4); // pas de mot-clé "var" !!!
avance();                // pas Reeborg, mais l'autre robot
Reeborg.avance();

with (Reeborg) {
    avance();      // même chose que Reeborg.avance();
    avance();
}
</pre>
<p>Comme vous pouvez le constater, <code>with</code> permet d'invoquer les méthodes d'un objet
à l'intérieur d'un bloc sans avoir à récrire le nom de l'objet à chaque instruction.
</p>

<a class="left-link" href="Javascript:void(0);" onClick="load_page('maze_again')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('keywords')">Suivant</a>
