<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('tokens1')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('summary1')">Suivant</a>
</nav>
<h1>Règle numéro 2</h1>

<p>J'ai déjà mentionné la première règle pour apprendre la programmation
    informatique: vous devez écrire des programmes (et les tester) et non
    simplement lire au sujet de la programmation.  C'est maintenant le temps
    de partager avec vous la deuxième règle, qui est possiblement le secret
    le mieux gardé en informatique.</p>
<dl>
<dt><b>Règle numéro 2</b></dt>
<dd>Écrivez vos programmes pour qu'il soit facile à lire et à comprendre
    par des <b><em>humains</em></b>.</dd>
</dl>
<p>C'est vrai, écrivez vos programmes informatiques pour que d'autres personnes,
    tout comme vous, les trouvent facile à lire et à comprendre par elles-mêmes.
Il est vrai que les langages informatiques sont conçus pour vous permettre
de donner des instructions aux ordinateurs.  Ces langages sont beaucoup
plus simples que les langues humaines et sont également utilisés pour partager
des idées entre programmeurs.
</p>
<p>Un des outils que vous pouvez utiliser pour écrire des programmes qui peuvent
    être plus facilement compris par les humains sont les <em>commentaires</em>.
</p>
<p>Les commentaires sont des notes écrites par un programmeur qui sont ignorées
    par l'ordinateur; leur seul but est d'être partagé avec d'autres humains. </p>
<p>Javascript vous offre deux façons d'écrire des commentaires:</p>
<ul><li>En écrivant un texte autrement arbitraire débutant par
<code>/*</code>  et se terminant par <code>*/</code>.</li>
<li> En précédent une partie d'une ligne de texte par <code>//</code>.</li></ul>
<p>Pour illustrer l'utilisation de commentaire, je vais tout d'abord
    écrire un programme sans utiliser de commentaires, puis le modifier
    pour inclure des commentaires et le rendre plus facile à lire par les humains,
    pour ensuite, après quelques explications,
     écrire une troisième version ... quasiment incompréhensible par
    des humains.  De plus, la même erreur sera présente dans les trois versions.
    Vous devez déterminer dans laquelle de ces trois versions il est plus facile
    de détecter l'erreur.
</p>
<pre class="jscode">avance();
avance();
tourne_à_gauche();
dépose();
avance();
avance();
tourne_à_gauche();
dépose();
avance();
tourne_à_gauche();
dépose();
avance();
avance();
tourne_à_gauche();
dépose();
</pre>

<p>Comparez donc la version ci-dessus avec une version identique
    (du point de vue de Reeborg) à laquelle on a ajouté
    des commentaires pour les humains; vous pourrez facilement
    identifier les commentaires car ils sont automatiquement
    présentés d'une autre couleur à l'écran.</p>

<pre class="jscode">/* Ceci est un simple programme
où Reeborg dessine un carré, déposant un jeton à
chaque coin.*/

avance();  // On termine une instruction par un point-virgule
avance();
tourne_à_gauche(); // Reeborg sait seulement tourner à gauche
dépose("jeton");  // On suppose que Reeborg a suffisamment de jetons

// On répète les instructions ci-dessus trois fois de plus
// pour compléter le carré.
avance();
avance();
tourne_à_gauche();
dépose("jeton");

avance();
tourne_à_gauche();
dépose("jeton");

avance();
avance();
tourne_à_gauche();
dépose("jeton");
</pre>

<p>Les commentaires ajoutés au programme ci-dessus ne sont pas
    particulièrement géniaux ... mais au moins l'un d'entre eux
    devrait vous permettre de trouver l'erreur dans le programme.
    Vous penserez peut-être que j'ai triché; cela dit, comment
    pouvez-vous connaître le but d'un programme s'il n'est indiqué
    nulle part?  L'addition de commentaires est parfois essentielle
    pour comprendre le but d'un programme et devient ainsi très
    utile pour détecter des erreurs.
 </p>
<p> Notez qu'en plus d'ajouter des commentaires, j'ai inséré quelques
    lignes sans code pour séparer les "blocs logiques" et mieux voir
    le patron suivi.  Ceci permet également d'identifier l'erreur
    plus facilement.
 </p>
 <p>Également, et bien que ceci ne crée aucune différence pour Reeborg,
j'ai spécifié <code>"jeton"</code> lorsque je voulais que Reeborg en
<code>dépose</code> un; ceci est plus clair pour un lecteur.</p>

<p>Finalement, voici la troisième version du <b>même programme</b>
écrite de telle sorte qu'elle soit beaucoup plus difficile à lire
par des humains, mais est tout aussi facile à lire par Reeborg.
</p>
<pre class="jscode">avance();avance();tourne_à_gauche();
dépose();avance();avance();tourne_à_gauche();
dépose();avance();tourne_à_gauche();dépose();
avance();avance();tourne_à_gauche();dépose();
</pre>

<p>Sélectionnez le monde <span class="world">Seul</span>
et "copiez / collez" chaque version du programme (une version à la fois)
dans l'éditeur.  En exécutant chaque version, vous pourrez vérifier
que Reeborg effectue la même tâche dans chaque cas.
</p>

<p>Alors, quelle version est la plus facile à lire et à comprendre?...</p>

<a class="left-link" href="Javascript:void(0);" onClick="load_page('tokens1')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('summary1')">Suivant</a>