<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('prototype')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('teleport2')">Suivant</a>
</nav>

<h1>Téléporte!</h1>

<p>Ouvrez le journal de Reeborg et exécutez le programme suivant:</p>
<pre class="jscode">var Reeborg = new RobotUsagé();
examine(Reeborg);</pre>
<p><code>examine</code> est une fonction unique au monde de Reeborg: elle permet d'obtenir
la liste des attributs et des méthodes [identifiées par les parenthèses () qui suivent leur nom]
qui appartiennent à un objet donné.  Notez que <code>téléporte</code> n'apparaît nulle part
dans cette liste.  On remarque que la majorité des noms sont des noms anglais et que les noms
français se trouvent à la fin.</p>
<p>Parmi les attributs, notez les variables <code>x</code> et <code>y</code>.  Si vous avez
vu les coordonnées cartésiennes avant, vous devriez avoir deviné que ces variables réfèrent à
la position de Reeborg.  Nous allons vérifié ceci en sélectionnant le monde <span class="world">Vide</span>
et en exécutant le programme suivant, tout en ayant le journal de Reeborg ouvert.  Notez que ce
serait peut-être une bonne idée d'exécuter le programme une instruction à la fois en cliquant
sur le bouton {step_button} au lieu du bouton {execute_button}.
</p>
<pre class="jscode">var Reeborg = new RobotUsagé();
Reeborg.avance();
écrit(Reeborg.x);
écrit(Reeborg.y);
Reeborg.x = 8;
Reeborg.avance();
écrit(Reeborg.x);</pre>
<p><em>Qu'arrive-t-il si vous commenter la deuxième instruction <code>avance()</code> pour empêcher
son exécution?</em></p>

<h2>Première tentative de téléportation</h2>
<p>Utilisons le code ci-dessus comme inspiration et tentons d'écrire une méthode
    qui permet à Reeborg de se téléporter à n'importe quel point.</p>
<pre class="jscode">RobotUsagé.prototype.téléporte = function (x, y) {
    this.x = x;
    this.y = y;
};

var Reeborg = new RobotUsagé();
Reeborg.téléporte(3, 3);
Reeborg.téléporte(4, 8);
</pre>
<p>Exécutez le programme.  Outre le fait que Reeborg soit créé, rien ne semble se passer...
    Ajoutez l'instruction <code>Reeborg.avance();</code> à la toute fin du programme et
    exécutez-le à nouveau. </p>
<p>Vous devriez maintenant voir que Reeborg s'est téléporté correctement au dernier endroit.
    Cependant, nous aimerions le voir lorsqu'il se téléporte à n'importe quel endroit.
    Pour comprendre pourquoi cela n'est pas le cas, nous devons en apprendre plus sur
    la façon dont le monde de Reeborg fonctionne. Ceci peut être fait en étudiant
    le code source.  Nous pouvons utiliser les fonctions <code>écrit()</code>, ou mieux
    encore <code>voir_source()</code>, ainsi que <code>examine()</code> pour nous aider.</p>
<p>Commençons par répéter l'exécution du programme suivant:</p>
<pre class="jscode">var Reeborg = new RobotUsagé();
examine(Reeborg);</pre>
<p>En examinant le journal de Reeborg, on peut identifier des méthodes similaires
    à <code>téléporte</code>, celle qu'on veut implémenter:</p>
<pre class="jscode">var Reeborg = new RobotUsagé();
écrit(Reeborg.avance);
voir_source(Reeborg.tourne_à_gauche); // plus facile à lire!</pre>
<p>En examinant le résultat, pouvez-vous identifier quelle instruction (dont le nom
    est en anglais) devrait être ajoutée pour qu'on puisse voir Reeborg se téléporter
    à un endroit?</p>
<a class="left-link" href="Javascript:void(0);" onClick="load_page('prototype')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('teleport2')">Suivant</a>

