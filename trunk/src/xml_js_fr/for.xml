<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('while_num')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('better_repeat')">Suivant</a>
</nav>

<h1>Boucles <code>for</code></h1>
<p>Comme nous l'avons vu, les boucles <code>while</code> peuvent être utilisées avec des
nombres suivant le patron:
</p>
<pre class="jscode">var n = valeur_initiale;  // initialisation
while (n < valeur_maximale) {  // condition pour terminer
    ...
    n++;  // incrément
}</pre>
<p>Une autre façon d'écrire un bout de programme ayant <em><b>exactement le même sens</b></em>
est d'utilisé une boucle <code>for</code>:</p>
<pre class="jscode">for ( var n = valeur_initiale; n < valeur_maximale; n++ ) {
    ...
}</pre>
<p>Ainsi, au lieu d'avoir l'initialisation d'une variable, la condition pour terminer la boucle
    et l'incrémentation d'une variable faites sur trois lignes différentes, elles
    apparaissent sur la même ligne::</p>
<pre class="jscode">for (initialisation; condition; incrément) {...}</pre>
<p>Les boucles <code>for</code> et <code>while</code> sont complètement équivalentes.
La décision de choisir l'une plutôt que l'autre est souvent décidée sur la base
de la lisibilité du code: pour des programmes qui utilisent des valeurs numériques
incrémentées à chaque passage de la boucle jusqu'à ce qu'une valeur maximale connue soit
atteinte, les boucles <code>for</code> sont souvent préférées parce que les trois étapes
(initialisation, condition, incrément) peuvent être perçues en même temps.  Notez que
l'une ou plusieurs (même les trois) de ces trois étapes peuvent être omises dans une
boucle <code>for</code>.  Par exemple, on pourrait écrire
</p>
<pre class="jscode">for ( ; rien_devant(); ) {...}</pre>
<p>plutôt que</p>
<pre class="jscode">while ( rien_devant() ) {...}</pre>
<p>Cependant, dans ce dernier cas, l'utilisation d'une boucle <code>while</code> est considérée
comme étant plus facile à lire.</p>
<p>Si on utilise une boucle <code>for</code>, on peut avoir une définition différente
pour une fonction comme <code>répète()</code>:</p>
<pre class="jscode">function mon_répète(fonction_quelconque, valeur_maximale){
    for(var n = 0; n < valeur_maximale; n++) {
        fonction_quelconque();
    }
}

mon_répète(avance, 9);
mon_répète(tourne_à_gauche, 4);</pre>
<p><b>Essayez</b> avec le monde <span class="world">Autour&nbsp;1</span>.</p>
<h2>Le <code>répète()</code> de Reeborg</h2>
<p>Ouvrez le journal de Reeborg et exécutez l'instruction suivante:</p>
<pre class="jscode">voir_source( répète );</pre>
<p>pour voir quelle définition Reeborg utilise pour la fonction <code>répète()</code>.
</p>

<p>Notez que vous pourriez aussi utiliser </p>
<pre class="jscode">écrit( répète );</pre>
<p>mais le code serait plus difficile à lire! </p>


<a class="left-link" href="Javascript:void(0);" onClick="load_page('while_num')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('better_repeat')">Suivant</a>
