<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('not')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('newspaper3')">Suivant</a>
</nav>

<h1>Tant que ...</h1>
<p>Lorsqu'on veut répéter un bloc de code jusqu'à ce qu'une certaine
    condition soit satisfaite, on peut utiliser le mot-clé <code>while</code>,
    mot anglais que l'on peut traduire par <b>tant que</b>.  Par exemple,
    supposons que l'on veuille que Reeborg se déplace en ligne droite
    jusqu'à ce qu'il rencontre un mur.  On pourrait écrire quelque chose comme

<pre class="jscode">
function avance_au_mur () {
    if ( rien_devant() ){
        avance();
    }
}

répète(avance_au_mur, 42);</pre>
<p>en se croisant les doigts et espérant que 42 sera un nombre suffisant
    de répétitions pour atteindre le mur.  Si on utilise plutôt le
    mot-clé <code>while</code>, on peut écrire</p>
<pre class="jscode">
while ( rien_devant() ){
    avance();
}</pre>
<p>C'est tout!  Plus de devinettes sur le nombre de répétitions à faire. </p>

<h2>Comment penser à <code>while</code></h2>
<p>Supposons que l'on ait le code suivant:</p>
<pre class="jscode">
while ( condition() ){
    instruction_1();
    instruction_2();
    instruction_3();
}</pre>
<p>Vous pouvez pensez ceci comme étant équivalent à:</p>
<pre class="jscode">
if ( condition() ){
    instruction_1();
    instruction_2();
    instruction_3();
}
if ( condition() ){
    instruction_1();
    instruction_2();
    instruction_3();
}
if ( condition() ){
    instruction_1();
    instruction_2();
    instruction_3();
}
if ( condition() ){
    instruction_1();
    instruction_2();
    instruction_3();
}
....</pre>
<p>c'est-à-dire que le bloc de code est répété aussi souvent que
    la condition soit satisfaite (<code>true</code>).  Qu'arrive-t-il
    si la condition est toujours satisfaite?   Le bloc de code
    est répété éternellement et le programme ne termine jamais.
</p>
<p>Ceci n'est pas une bonne chose.</p>
<p>Plutôt que d'utiliser la description de blocs de code répétés, les programmeurs
    décrivent ceci comme une <b>boucle</b>: en commençant par la première instruction,
     (<code>instruction_1();</code>) à l'intérieur du bloc de code,
     on continue à exécuter les autres jusqu'à atteindre la dernière
(<code>instruction_3();</code>), puis le programme complète la boucle et
retourne tout juste avant le début du bloc de code où la condition est de
nouveau évaluée; si elle est satisfaite, la boucle se répète.  Si la condition
est toujours satisfaite, on répète ad vitam æternam  et on a alors une
<b>boucle infinie</b>. </p>

<p>Conclusion: vous voulez vous assurez que la condition ne sera pas satisfaite (devenant équivalente
    à <code>false</code>) à quelque temps. </p>

<h2>De retour aux haies!</h2>
<p>Retournons aux courses <span class="world">Haies&nbsp;1</span>,
<span class="world">Haies&nbsp;2</span> et <span class="world">Haies&nbsp;3</span>,
et écrivons un seul programme pour ces trois courses.  Votre programme pourra ressembler
à ceci:</p>
<pre class="jscode">
function saute() {
    // instructions ...
}

function cours_ou_saute () {
    // instructions
}

while ( !au_but() ){
    cours_ou_saute();
}</pre>
<p>C'est tout!  Plus besoin d'un nombre arbitraire de répétitions.
    À partir de maintenant, n'utilisez plus <code>répète()</code> <b><em>sauf</em></b>
    si vous savez <b>exactement</b> le nombre de fois qu'une certaine fonction doit
    être répétée.</p>

<a class="left-link" href="Javascript:void(0);" onClick="load_page('not')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('newspaper3')">Suivant</a>