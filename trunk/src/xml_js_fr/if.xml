<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('summary3')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('at_goal')">Suivant</a>
</nav>
<h1>Si seulement ...</h1>
<p>Si seulement Reeborg pouvait prendre des décisions de lui-même, écrire des programmes serait
    tellement plus simple ... <b>OUPS&nbsp;!</b> J'ai oublié de vous le mentionner: Reeborg <b>peut</b>
    prendre ses propres décisions!
</p>
<h2>Le mot-clé <code>if</code></h2>

<p>Sélectionnez le monde <span class="world">Seul</span>) et faites-en sorte
que Reeborg exécute le programme suivant</p>
<pre class="jscode">
if (true) {
    avance();
}

if (false) {
    tourne_à_gauche();
}</pre>
<p><code>true</code> (signifiant <b>vrai</b>) et <code>false</code> (signifiant <b>faux</b>) sont
deux mots-clés de Javascript.  Je vous suggère de les échanger l'un pour l'autre et
d'exécuter le programme à nouveau.  Est-ce que Reeborg <code>avance</code> ou
<code>tourne_à_gauche</code>?</p>
<h2>Énoncé <code>if</code> </h2>
<p>L'<em>énoncé</em> <code>if</code> suit un patron semblable à celui de <code>function</code>: </p>
<pre class="jscode">
function nom_quelconque() {
    // bloc de code
}

if (condition_quelconque) {
    // bloc de code
}</pre>

<h2>Comment interpréter les énoncés <code>if</code> </h2>
<p>Lorsque nous avons présenté les fonctions, nous avons expliqué comment on pouvait
    interpréter l'<b>invocation</b> d'une fonction comme étant équivalente à
    insérer le bloc de code du corps de la fonction à l'endroit de l'invocation.
    Ainsi:</p>
<pre class="jscode">
avance();
tourne_à_droite();  // invocation
avance();
</pre>
<p>est équivalent à</p>
<pre class="jscode">
avance();
// début du bloc de code pour tourne_à_droite()
tourne_à_gauche();
tourne_à_gauche();
tourne_à_gauche();
// fin du bloc de code
avance();
</pre>
<p>Les énoncés <code>if</code> peuvent être interprétés de façon similaire, sauf
que nous avons une <em>insertion</em> ou une <em>élimination</em> <b>conditionnelle</b>
du bloc de code.  Ainsi: </p>
<pre class="jscode">
avance();
if (true) {
    tourne_à_gauche();
    tourne_à_gauche();
}
avance();
</pre>
<p>est équivalent à</p>
<pre class="jscode">
avance();
tourne_à_gauche();
tourne_à_gauche();
avance();
</pre>
<p>alors que </p>
<pre class="jscode">
avance();
if (false) {
    tourne_à_gauche();
    tourne_à_gauche();
}
avance();
</pre>
<p>est équivalent à</p>
<pre class="jscode">
avance();
avance();
</pre>
<p>Il est important de noter que cette insertion ou élimination d'un bloc de code
    n'est pas quelque chose de permanent: si, pour quelque raison, l'exécution
    du programme faisait en sorte que l'énoncé <code>if</code> était répété à
    nouveau, la condition serait réévaluée à chaque fois, ce qui pourrait mener
    à des résultats différents d'une évaluation à l'autre.
</p>

<h2>PLus utile que vous ne le pensez...</h2>

<p>Avoir à spécifier <code>true</code> ou <code>false</code> dans un programme n'aide
pas Reeborg à décider de lui-même.  Cependant, il existe des fonctions que Reeborg
reconnaît comme lui indiquant des décisions à prendre.  Une de ces fonctions
est <code>jeton_ici()</code> qui indique à Reeborg si un ou plusieurs jetons se
trouvent aux coordonnées où Reeborg est situé.   Par exemple, si on demandait
à Reeborg de collectionner des jetons, une partie du code pourrait être:
</p>
<pre class="jscode">
if ( jeton_ici() ) {
    prendre_jeton();
}</pre>
<p>Examinez à tour de rôle les mondes <span class="world">Jetons&nbsp;1</span> et
<span class="world">Jetons&nbsp;2</span>.  Dans chaque cas, en supposant que Reeborg
se déplace le long d'une ligne, tout ce qu'il a à faire lorsqu'il trouve un jeton est:
</p>
<ol><li>prendre ce jeton</li>
<li>avancer d'une case</li>
<li>déposer ce jeton</li>
<li>avancer d'une autre case</li>
<li>et il a <code>terminé()</code></li></ol>
<p>où j'ai introduit une nouvelle instruction que Reeborg comprend: <code>terminé()</code>.
En fait, vous pouvez penser à cette instruction comme quelque chose que Reeborg dit lui-même
lorsqu'il déclare avoir terminé une tâche.
</p>
<p>Écrivons donc le une esquisse d'un programme unique qui pourrait permettre à Reeborg d'accomplir
    la tâche dans les deux mondes mentionnés ci-dessus, soit
    <span class="world">Jetons&nbsp;1</span> et
<span class="world">Jetons&nbsp;2</span></p>
<pre class="jscode">
function avance_jusque_tâche_terminée() {
    avance();
    if ( jeton_ici() ){
        // quelque chose
        // quelque chose d'autre
        // autre chose encore
        // une de plus
        terminé();
    }
}

répète(avance_jusque_tâche_terminée, 42);</pre>
<p>Pourquoi 42? ... Je n'ai pas de véritable raisons pour ce choix.  Tout ce que je
    veux est que Reeborg avance suffisamment de fois pour compléter sa tâche peu
    importe la dimension du monde.  Les deux mondes en questions sont suffisamment
    petit que de répéter 42 fois est plus que suffisant (certains diraient que c'est
    excessif).   Je suis d'accord avec vous, ceci ne semble pas être une façon très
    intelligente de faire les choses ... On fera mieux plus tard.</p>
<p>Pour l'instant, copiez le code ci-dessus dans l'éditeur de code,
    ajouter les instructions manquantes, et vérifiez que votre programme fonctionne
    dans les mondes <span class="world">Jetons&nbsp;1</span> et
<span class="world">Jetons&nbsp;2</span>.</p>

<a class="left-link" href="Javascript:void(0);" onClick="load_page('summary3')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('at_goal')">Suivant</a>