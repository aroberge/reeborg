<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('recursion5')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('return2')">Suivant</a>
</nav>

<h1>return</h1>

<p>Comme vous le savez, Reeborg n'est pas parfaitement opérationnel.  Il peut seulement tourner
    à gauche, il a une fuite d'huile, et il peut voir s'il y a un mur devant lui
    ou tout juste à sa droite, mais pas à sa gauche; de plus, il ne voit les jetons que lorsqu'il
    est littéralement au-dessus d'eux.  Reeborg a également une boussole qui fonctionne plus ou
    moins bien: il peut déterminer s'il fait face au nord ... ou non; pas moyen d'obtenir d'autre
    information au sujet de son orientation.
    Pour déterminer s'il fait face au nord, vous pouvez demander à Reeborg de faire le test
    <code>face_au_nord()</code>.

<small>N.B.: Dans le monde de Reeborg, le nord est vers le haut de l'écran, l'est est vers la droite, l'ouest vers la gauche et le sud vers le bas de l'écran. </small></p>

<h2>Orientez Reeborg</h2>

<p>Sélectionnez un monde approprié et écrivez un court programme qui fera en sorte que
    Reeborg tourne vers la gauche jusqu'à ce qu'il soit face au nord, quelque soit son
    orientation de départ.</p>

<h2>Obtenir des résultats de fonctions</h2>
<p>Les tests comme <code>face_au_nord()</code> sont des fonctions Javascript.
Ces fonctions diffèrent des autres fonctions telles que <code>tourne_à_gauche()</code> ou
 <code>avance()</code> car elles <em><b>retournent</b></em> une valeur, utilisant le
 mot-clé <code>return</code>.  Commençons par un exemple simple et faites en sorte
 que Reeborg exécute le programme suivant.
</p>
<pre class="jscode">function interruption() {
    avance();
    return;
    avance();
}

interruption();</pre>

<p>Puisque le monde de Reeborg utilise jshint pour vérifier le code avant son exécution,
    vous verrez l'avertissement  <em>Unreachable 'avance' after 'return'</em> qui indique
    que la deuxième instruction <code>avance</code> ne peut pas être exécutée après
    <code>return;</code> ... ce que vous pourrez constater en voyant que Reeborg ne
    fera qu'un pas. On peut "cacher" cet avertissement en mettant le mot-clé
   <code>return</code> à l'intérieur d'un bloc <code>if</code> .</p>

<pre class="jscode">function interruption() {
    avance();
    if (true) {
        return;
    }
    avance();
}

interruption();</pre>
<p>Cette fois, il n'y a plus d'avertissement, mais le second <code>avance()</code>
n'est toujours pas exécuté: l'exécution de la fonction termine lorsque l'énoncé
contenant le mot-clé  <code>return;</code> est exécuté.</p>

<p>Le mot-clé <code>return</code> peut être accompagné de quelque chose d'autre comme
l'exemple suivant le démontre: </p>
<pre class="jscode">function nord(){
   return face_au_nord();
}

while (!nord()) {
    tourne_à_gauche();
}
</pre>
<p>Lorsque vous exécuterez ce programme, vous verrez que la fonction <code>nord()</code>
   donne exactement le même résultat que si vous utilisiez directement
   <code>face_au_nord()</code>; ceci est le résultat de l'utilisation de l'énoncé <code>return</code>.
   Nous pouvons utiliser ce résultat pour permettre à Reeborg d'identifier d'autres orientations
   que le nord (et réparer sa boussole).
   Tout d'abord, nous savons que si Reeborg tourne 4 fois à gauche, il reviendra à son orientation
   de départ: nous voulons garantir que l'orientation de Reeborg à la fin du test sera
   la même qu'au début.</p>
    <p> Supposons que nous voulons savoir si Reeborg fait face au sud.  Nous pouvons lui
        demander de tourner à gauche deux fois et noter si son orientation est face au
        nord (et donc qu'il était face au sud avant de tourner) ou non, et de tourner
        deux fois à gauche de nouveau.  Utilisant le mot-clé <code>return</code>, Reeborg
        peut indiquer le résultat qu'il avait noté après deux tours à gauche.</p>

<pre class="jscode">function face_au_sud(){
    tourne_à_gauche();
    tourne_à_gauche();
    var orientation = face_au_nord();
    tourne_à_gauche();
    tourne_à_gauche();
    return orientation;
}

// on oriente Reeborg pour qu'il soit face au sud comme test
while (!face_au_sud()) {
    tourne_à_gauche();
}</pre>

<p><b>Vérifiez que ceci fonctionne!</b></p>

<p>Ceci fonctionne ... mais, dépendant de l'orientation initiale de Reeborg,
    vous pourriez devenir étourdi à le voir tourner: lorsque son orientation initiale
    n'est pas face au sud, pour chaque virage à gauche qu'il doit faire pour
    <em>changer</em>, il doit en faire 4 pour <em>déterminer</em>
    son orientation.
</p>


<p>Plus tard, en examinant le code source de Reeborg, nous pourrons trouver
    une façon beaucoup plus directe, et moins étourdissante, de déterminer
    son orientation.</p>

<h2>Mini-quiz</h2>

<p>Écrivez un programme faisant en sorte que Reeborg soit orienté face à l'ouest, peu importe
    son orientation initiale.  Vérifiez la validité de votre programme en commençant par
    quelques virages à gauche, pour tester différentes orientations initiales de Reeborg.</p>

<h2>Comment penser à return</h2>
<p>Supposons que nous ayons le code suivant:</p>
<pre class="jscode">function fonction_quelconque () {
    ...
    return quelque_chose;
}

... = fonction_quelconque();
</pre>
<p>Dans ce cas, l'invocation de <code>fonction_quelconque()</code> à la dernière
ligne sera remplacée par la valeur de <code>quelque_chose</code> qui est la
variable suivant le mot-clé <code>return</code>.  S'il n'y a rien après
<code>return</code>, alors le résultat est <code>undefined</code> (non défini).</p>

<a class="left-link" href="Javascript:void(0);" onClick="load_page('recursion5')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('return2')">Suivant</a>