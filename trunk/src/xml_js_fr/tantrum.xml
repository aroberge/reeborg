<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('random2')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('try')">Suivant</a>
</nav>

<h1>Reeborg pique une crise</h1>
<p><em><b>N.B.:</b> Cette leçon inclut plusieurs petits programmes que vous devriez définitivement
exécuter pour confirmer votre compréhension du sujet.</em></p>
<h2>Vocabulaire anglais</h2>
<p>En anglais, l'expression <em>to throw a tantrum</em> signifie <em>piquer une crise</em>.
Le verbe <em>to throw</em> signifie habituellement <em>lancer</em>.  Le verbe
<em>to catch</em> signifie <em>attraper</em>.  Ainsi, si on joue à lancer et à attraper
une balle, on dira <em>to throw and catch a ball</em>.</p>

<h2>De retour à la programmation</h2>
<p>Sélectionnez n'importe quel monde où Reeborg est présent et exécutez le
    programme suivant: </p>
<pre class="jscode">var tantrum = new RUR.Error("Je ne veux pas!");

throw tantrum;
avance();</pre>
<p>Reeborg n'avance jamais parce qu'il pique une crise! </p>
<h2>Prendre soin des crises</h2>
<p>Voyons trois façons de composer avec les crises de Reeborg et faire
    en sorte qu'il avance.</p>
<p>Ouvrez le journal de Reeborg et exécutez le programme suivant: </p>
<pre class="jscode">var tantrum = new RUR.Error("Je ne veux pas!");

try {           // try  == essaie
    throw tantrum;
}
catch (e) {     // catch == attrape
    écrit(e.message);
}
finally {       // finally == finalement
    avance();
}</pre>
<p>Après avoir exécuté ce programme, supprimer le bloc <code>catch</code>
complètement de façon à n'avoir que deux blocs, <code>try</code> et <code>finally</code>,
puis exécutez le programme à nouveau.
   </p>
<p>Finalement, exécutez le programme suivant:</p>
<pre class="jscode">var tantrum = new RUR.Error("Je ne veux pas!");

try {
    throw tantrum;
}
catch (e) {
    écrit(e.message);
}
avance();</pre>
<p>Ces trois programmes différents devraient faire en sorte que Reeborg avance d'un pas à chaque fois. </p>

<h2>Les erreurs Javascript</h2>

<p>Dans les exemples ci-dessus, nous avons vu quatre nouveau mots-clés: <code>throw</code>,
<code>try</code>, <code>catch</code> et <code>finally</code>.   Tous ces mots sont utilisés pour
composer avec les <b>erreurs</b> (<code>Error</code>) Javascript.
Par exemple, exécutez le programme constitué
de cette seule instruction: </p>
<pre class="jscode">a();</pre>
<p>Vous devriez voir une boîte de dialogue avec le message suivant: </p>
<pre class="jscode">TypeError
a is not a function</pre>
<p>nous indiquant que <b>a</b> n'est pas une fonction.  Exécutez également le programme suivant: </p>
<pre class="jscode">throw new TypeError("a n'est pas une fonction");</pre>
<p>Vous devriez voir essentiellement le même message, cette fois-ci traduit en français.
</p>
<p>En plus des erreurs de base, <code>Error</code> et <code>TypeError</code>, Javascript
a plusieurs autres types d'erreurs possibles telles que <code>EvalError</code>,
<code>RangeError</code>, <code>ReferenceError</code>,
<code>SyntaxError</code> et <code>URIError</code>; toutes ces <em>erreurs</em> Javascript
sont dérivées de l'erreur de base <code>Error</code>.
Les programmeurs peuvent créer leur propre type d'erreur telles que les créateurs
du monde de Reeborg ont fait avec <code>RUR.Error</code>. Exécutez le programme suivant: </p>
<pre class="jscode">try {
    a();
} catch(e) {
    écrit(e instanceof Error);     // true
    écrit(e instanceof TypeError); // true
    écrit(e instanceof RUR.Error); // false
}

écrit("=============");
try {
    prend("jeton");   // dans un monde où il n'y en a pas
} catch(err) {      // nom de variable "err" différent ... on peut choisir le nom qu'on veut
    écrit(err instanceof Error);     // false
    écrit(err instanceof RUR.Error); // true
}</pre>

<h2>Blocs <em>catch</em> multiples</h2>
<p>Javascript d'avoir plusieurs blocs <code>catch</code></p>
<pre class="jscode">"no strict";  // supprime les faux messages dans l'éditeur

try {
    a();
} catch(e if e instanceof TypeError) {
    écrit("Erreur de type TypeError");
} catch(e if e instanceof Error) {
    écrit("Erreur de type Error");
} catch(e if e instanceof RUR.Error) {
    écrit("Erreur de type RUR.Error");
}
</pre>
<p>Lorsqu'il y a plusieurs blocs <code>catch</code>, le premier qui est valide est
celui qui est exécuté - un peu comme pour les blocs <code>if/else</code>.
Essayez d'interchanger les blocs <code>TypeError</code> et <code>Error</code> ci-dessus.</p>
<p>Il est important d'avoir les blocs les plus spécifiques possibles en
    premier, comme <code>TypeError</code>, plutôt que les blocs plus génériques, tel que
 <code>Error</code>.</p>
<p>Bien qu'il ne soit pas toujours possible de composer entièrement avec les conséquences
    des erreurs là où elles se produisent, en utilisant des blocs <code>try/catch</code>
    on peut documenter là où l'erreur a eu lieu, et la traiter ailleurs.</p>
<pre class="jscode">try{
    //plusieurs lignes de code

    try {
        a();
    } catch (e) {
        écrit("Une erreur a eu lieu dans la fonction X...");
        throw e;  // renvoie à nouveau, plus loin
    }
    écrit("ceci ne sera pas exécuté");
} catch (err) {
    écrit("On traite ici de l'erreur précédente");
}</pre>


<a class="left-link" href="Javascript:void(0);" onClick="load_page('random2')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('try')">Suivant</a>
