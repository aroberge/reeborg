<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('random2')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('try')">Suivant</a>
</nav>

<h1>Reeborg throws a tantrum</h1>
<p><em><b>Note:</b> this lesson is a bit long and includes many small programs that you
definitely should run to confirm your understanding of the topic.</em></p>


<p>Select a world with Reeborg in it and try running the following program:</p>
<pre class="jscode">var tantrum = new RUR.Error("I don't want to!");

throw tantrum;
avance();</pre>
<p>Reeborg never moves as he throws a tantrum!</p>
<h2>Taking care of tantrums</h2>
<p>Let's see three different ways of dealing with Reeborg's tantrum and have
it move.</p>
<p>Open Reeborg's diary and run the following program.</p>
<pre class="jscode">var tantrum = new RUR.Error("I don't want to!");

try {
    throw tantrum;
}
catch (e) {
    écrit(e.message);
}
finally {
    avance();
}</pre>
<p>After running the above code, remove the <code>catch</code> block completely,
so as to have only the
<code>try</code> and <code>finally</code> blocks, and run the program again.</p>
<p>Finally, run the following (which has no <code>finally</code> block):</p>
<pre class="jscode">var tantrum = new RUR.Error("I don't want to!");

try {
    throw tantrum;
}
catch (e) {
    écrit(e.message);
}
avance();</pre>
<p>All three versions should give the same result in terms of Reeborg taking one step.</p>

<h2>Javascript errors</h2>

<p>In the above examples, we have seen four new Javascript keywords: <code>throw</code>,
<code>try</code>, <code>catch</code> and <code>finally</code>.   These all deal with the
concept of Javascript <b>errors</b>.  For example, execute the following one-line program:</p>
<pre class="jscode">a();</pre>
<p>You should see an alert popup  with the following message:</p>
<pre class="jscode">TypeError
a is not a function</pre>
<p>Now try running the following</p>
<pre class="jscode">throw new TypeError("a is not a function");</pre>
<p>Again, you should see an alert popup with the exact same message.</p>
<p>In addition to the basic <code>Error</code> and <code>TypeError</code>, Javascript has
other available errors such as <code>EvalError</code>, <code>RangeError</code>, <code>ReferenceError</code>,
<code>SyntaxError</code> and <code>URIError</code>; all Javascript <code>errors</code>
are derived from the basic "type" <code>Error</code>.  Programmers can design their own
error types, such as was done in Reeborg's world: <code>RUR.Error</code>.  Try running
the following program:</p>
<pre class="jscode">try {
    a();
} catch(e) {
    écrit(e instanceof Error);     // true
    écrit(e instanceof TypeError); // true
    écrit(e instanceof RUR.Error); // false
}

écrit("=============");
try {
    prend("jeton");   // in a world where none is present
} catch(err) {      // any variable name can be used
    écrit(err instanceof Error);     // false
    écrit(err instanceof RUR.Error); // true
}</pre>

<h2>Multiple catch blocks</h2>
<p>Javascript allows multiple <code>catch</code> blocks</p>
<pre class="jscode">"no strict";  // prevent false error messages in editor

try {
    a();
} catch(e if e instanceof TypeError) {
    écrit("Caught TypeError");
} catch(e if e instanceof Error) {
    écrit("Caught Error");
} catch(e if e instanceof RUR.Error) {
    écrit("Caught RUR.Error");
}
</pre>
<p>With multiple <code>catch</code> blocks, the first valid one is the one that
is executed.  Try interchanging <code>TypeError</code> with <code>Error</code> above.</p>
<p>It is usually recommended to first <code>catch</code> and deal with the more
specific error possible, such as <code>TypeError</code>, rather than a more
general one, such as <code>Error</code>.</p>
<p>While it may not always be possible to completely take care of the
consequences of an error where it occurs, using embedded <code>try/catch</code> blocks
one can document where an error occur and deal with it somewhere else.</p>
<pre class="jscode">try{
    // many lines of code

    try {
        a();
    } catch (e) {
        écrit("Error occurred in function X...");
        throw e;  // sends it further
    }
    écrit("will be not be executed");
} catch (err) {
    écrit("Dealing with previous error");
}</pre>


<a class="left-link" href="Javascript:void(0);" onClick="load_page('random2')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('try')">Suivant</a>
