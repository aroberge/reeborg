<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('tantrum')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('continue')">Suivant</a>
</nav>

<h1>Évasions aléatoires 2</h1>

<p>Sélectionnez le monde <span class="world">Labyrinthe&nbsp;1</span>.
Plutôt que de vérifier s'il y a un mur devant lui avant de tenter d'avancer,
Reeborg va exécuter l'instruction <code>avance</code> et, si un mur lui
bloque le chemin de telle sorte qu'un erreur est générée, on va tout
simplement capturer l'erreur (<code>catch</code>).  Cette approche
est parfois décrite par la phrase
<em>Mieux vaut demander pardon que permission</em>.  </p>

<pre class="jscode">var résultat;
RUR.world.max_steps = 10000;
pense(0);

while (!au_but()) {
    résultat = Math.random();
    if (résultat < 1/3 ){
        try {
            avance();
        } catch (e) {
            // on n'avance pas!
        }
    } else if (résultat < 2/3 ) {
        tourne_à_droite();
    } else {
        tourne_à_gauche();
    }
}</pre>

<h2>Quelle approche est préférable? </h2>

<p>Dans la plupart des cas, <em>Réfléchir avant d'agir</em>, comme on l'avait fait dans le
premier exemple, est la façon recommandée de composer avec les problèmes potentiels.
Si on s'attend à ce qu'une erreur ne soit produite que très rarement, l'approche
<em>Mieux vaut demander pardon que permission</em> <b>pourrait</b> être préférable.
Dans le cas de l'évasion du labyrinthe avec des mouvements aléatoires, on s'attend à
avoir à composer avec plusieurs situations où un mur pourrait nous empêcher d'avancer
et il est donc préférable de <em>réfléchir avant d'agir</em>.</p>
<p>Cela dit, en dépit du grand nombre d'erreurs possibles, les créateurs du monde de Reeborg ont
    déterminé qu'il était préférable d'utiliser l'approche <em>mieux vaut demander pardon que permission</em>
    pour composer avec les erreurs dans <b>vos</b> programmes (comme lorsque Reeborg
    frappe un mur).  Ainsi, <b>vos</b> programmes sont exécutés sans vérifier auparavant
    si une erreur aura lieu.  Si une erreur a lieu, le programme est interrompu et une
    erreur est "lancée" (<code>throw</code>) et "attrapée" (<code>catch</code>) ailleurs,
    là où Reeborg a l'opportunité de protester en criant après vous.</p>

<a class="left-link" href="Javascript:void(0);" onClick="load_page('tantrum')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('continue')">Suivant</a>
