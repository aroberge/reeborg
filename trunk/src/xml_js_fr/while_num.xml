<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('increment')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('for')">Suivant</a>
</nav>

<h1>Reeborg compte</h1>
<p>Sélectionnez le monde <span class="world">Autour&nbsp;1</span>.  Vous avez
vérifié précédemment que Reeborg prend 9 pas pour rejoindre le mur à droite.
Utilisons Reeborg pour compter le nombre de pas à nouveau en se basant sur
le nombre de pas pour éviter de frapper le mur. </p>
<pre class="jscode">var nombre_de_pas = 0;
while (nombre_de_pas < 9 ){  // "<" signifie "plus petit que"
    avance();
    nombre_de_pas++;
}</pre>
<p><b>Essayez!</b>  Puis, modifiez le programme pour écrire la valeur de la variable <code>nombre_de_pas</code>
dans le journal de Reeborg à chaque fois que sa valeur change.</p>
<h2>Définition de <code>répète()</code>?</h2>
<p>Dans le programme ci-dessus, Reeborg comptait le nombre de pas et en faisait un
    nombre total prédéterminé à l'avance.  Nous avons vu comment faire la même chose précédemment
    utilisant une seule instruction:</p>
<pre class="jscode">répète(avance, 9);</pre>
<p>Définissons une fonction que nous allons appeler <code>mon_répète</code> et qui
<em>cachera</em> le code apparaissant dans la boucle <code>while</code> ci-dessus :</p>
<pre class="jscode">function mon_répète() {
    var nombre_de_pas = 0;
    while (nombre_de_pas < 9 ){
        avance();
        nombre_de_pas++;
    }
}

mon_répète();   // on l'utilise!
</pre>
<p>Cette fonction n'est pas très utile comparativement à <code>répète()</code> puisque le nombre
de pas à prendre ainsi que l'instruction à répéter (<code>avance</code>) doivent être codées spécifiquement.
On peut faire mieux en <em>passant</em> des <b>arguments</b> à la fonction
<code>mon_répète</code> comme ce qui suit: </p>
<pre class="jscode">function mon_répète(fonction_quelconque, valeur_maximale) {
    var nombre_de_pas = 0;
    while (nombre_de_pas < valeur_maximale ){
        fonction_quelconque();
        nombre_de_pas++;
    }
}

mon_répète(avance, 9);
mon_répète(tourne_à_gauche, 4);
</pre>
<p><b>Essayez!</b></p>
<h2>Portée des variables</h2>
<p>Comparez</p>
<pre class="jscode">var nombre_de_pas = 0;
function mon_répète(fonction_quelconque, valeur_maximale) {
    while (nombre_de_pas < valeur_maximale ){
        fonction_quelconque();
        nombre_de_pas++;
    }
}</pre>
<p>avec la définition précédente.
    Vous devriez d'abord remarquer que la couleur de la variable <code>nombre_de_pas</code> est différente
    dans ces deux cas. Si vous regardez de plus près, vous verrez que dans un cas, cette variable
    est définie, à l'aide du mot-clé <code>var</code>, à <em>l'intérieur</em> de la fonction alors que dans l'autre cas elle est définie à l'extérieur. Lorsqu'une variable est définie à l'intérieur d'une fonction
    on dit que c'est une variable <b>locale</b>: sa valeur est seulement connue à l'intérieur de la fonction
    et non dans le reste du programme.  Autrement, on a une variable <b>globale</b>.
    On utilise le terme de <em>portée</em> d'une variable (<em>scope</em> en anglais) pour référer
    au fait que c'est une variable locale ou globale.  On recommande fortement d'utiliser des
    variables locales lorsque c'est possible; ceci permet d'utiliser le même nom pour d'autres
    variables locales utilisées ailleurs dans le programme sans que les changements à leur valeur
    n'affecte celle de la variable locale.  Si vous utilisez des variables globales, un changement
    de valeur à un endroit changera la valeur de cette variable partout ailleurs dans le programme,
    ce qui peut mener à des bogues difficiles à retracer.</p>
<a class="left-link" href="Javascript:void(0);" onClick="load_page('increment')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('for')">Suivant</a>