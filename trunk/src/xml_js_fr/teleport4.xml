<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('teleport3')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('array')">Suivant</a>
</nav>

<h1>La véritable téléportation</h1>

<p>À la fin de la leçon précédente, vous avez peut-être trouvé que l'attribut <code>_is_leaky</code>,
qu'on pourrait traduire en français par <b>_a_une_fuite</b> avait la valeur <code>true</code>
et que la <em>méthode</em> <code>a_une_fuite()</code> pouvait être utilisée pour changer
la valeur de cet attribut.  Notez que l'attribut en question a un nom dont le premier caractère
est le symbole de soulignement <code>_</code>: ceci est une convention souvent utilisée pour
dénoter des attributs <b>privés</b>, c'est-à-dire des attributs qui ne devraient normalement pas
être modifiés par un autre programmeur.</p>
<p>Vous vous demandez peut-être pourquoi ce choix ... en fait, j'avais deux raisons:</p>
<ul><li>Je voulais vous démontrer l'utilisation de cette convention. </li>
<li>Les leçons (et le code) ont été écrit en premier en anglais.  Vous pouvez vérifier
    qu'il existe également une <em>méthode</em> <code>is_leaky()</code> dont la définition est identique
    à celle de <code>a_une_fuite()</code>; cette méthode apparaît (en anglais)
    à un seul endroit dans le programme ce qui permet de lui créer une équivalence en français.
    Par contre l'attribut  <code>_is_leaky</code> est utilisé à plusieurs endroits dans le programme
    et il ne serait pas pratique de tenter de lui donner une traduction partout.  Si je décidait
    de changer son nom partout, vos programmes continueraient à fonctionner correctement en autant que
    vous utilisiez la méthode <code>a_une_fuite()</code> qui ferait appel à la bonne variable.</li></ul>
<p>Donc, en utilisant la méthode publique, arrêtons la fuite temporairement pendant la téléportation
    pour simuler véritablement ce qu'une téléportation devrait faire.  Pour mieux voir ce qui se passe,
    on va également ajouter quelques instructions de plus.</p>

<pre class="jscode">RobotUsagé.prototype.téléporte = function (x, y) {
    this.prev_x = this.x;
    this.prev_y = this.y;
    this.x = x;
    this.y = y;

    this.a_une_fuite(false);  // plus de fuite
    RUR.world.add_frame();    // dessine le robot à la nouvelle position
    this.a_une_fuite(true);   // nouvelle fuite
};

var Reeborg = new RobotUsagé();
Reeborg.avance();
Reeborg.téléporte(3, 3);
Reeborg.tourne_à_gauche();
Reeborg.téléporte(4, 8);
Reeborg.avance();
</pre>
<p><b>Essayez!</b></p>
<h2>Une mise en garde</h2>
<p>Le programme ci-dessus fonctionnera même si les coordonnées données à Reeborg
    comme destination ne sont pas des entiers; ainsi Reeborg pourrait se
    retrouver à l'intérieur d'un mur!  Plus tard, vous verrez des méthodes
    mathématiques telle que <code>Math.floor</code> qui pourrait être utilisée
    pour garantir que Reeborg ne se téléporterait qu'à des endroits ayant
    des coordonnées à valeurs entières. </p>

<a class="left-link" href="Javascript:void(0);" onClick="load_page('teleport3')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('array')">Suivant</a>

