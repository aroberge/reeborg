<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('recursion')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('recursion3')">Suivant</a>
</nav>
<h1>Tricky recursion</h1>
<p>So, you understand the recursion example we just saw.  Let me write it
    again here.</p>
<pre class="jscode">function go_home(){
    avance();
    if (!au_but()) {
        go_home();
    }
}

// now do it!
go_home();</pre>
<p>Now, remember how I explained that when a function is called, we can think of it
as replacing the function call by the body of that function.  By this, I mean that
this instruction:</p>
<pre class="jscode">go_home();</pre>
is equivalent to
<pre class="jscode">avance();
if (!au_but()) {
    go_home();
}</pre>
<p>Let's assume that the first time we excute these instructions, <code>au_but</code> is
<code>false</code> and hence <code>!au_but()</code> is <code>true</code> ... like it
was for world <span class="world">Home&nbsp;1</span>.  In this case, the above
call to <code>go_home()</code> is also executed, and the above code is equivalent to:</p>
<pre class="jscode">avance();
    go_home();</pre>
<p>We can now replace the call to <code>go_home()</code> by its definition</p>

<pre class="jscode">avance();
    avance();
    if (!au_but()) {
        go_home();
    }</pre>
<p>and could, in theory, keep going like this forever, always replacing the
call to <code>go_home()</code> by its definition.</p>
<p>However, we don't want that as we want things to end eventually ... which they
do fortunately for world <span class="world">Home&nbsp;1</span>.  In that case
after the second <code>avance()</code>, we were <code>au_but()</code> and
<code>go_home()</code>was not called, which was equivalent to:</p>
<pre class="jscode">avance();
    avance();</pre>

<p><b>It is really important that you understand the above explanation before going any further.</b>
So, make sure to read it again if necessary as we are going to consider a slightly trickier example.</p>

<h2>Small change...</h2>
<p>Consider the program below</p>
<pre class="jscode">function go_home(){
    avance();
    if (!au_but()) {
        go_home();
    }
    tourne_à_gauche();
}

// now do it!
go_home();</pre>
<p>Try to figure out what it does before trying to have Reeborg execute it.  An explanation
follows in the next lesson.</p>
<a class="left-link" href="Javascript:void(0);" onClick="load_page('recursion')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('recursion3')">Suivant</a>