<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('recursion')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('recursion3')">Suivant</a>
</nav>
<h1>Récursivité plus compliquée</h1>
<p>Avant d'aborder un exemple un peu plus compliqué, revoyons l'exemple précédent et
    écrivons-le à nouveau. </p>
<pre class="jscode">function va_au_but(){
    avance();
    if (!au_but()) {
        va_au_but();
    }
}

// définition complétée; on y va!
va_au_but();</pre>
<p>Si vous vous rappelez, j'ai expliqué que lorsqu'on invoque une fonction, ceci est équivalent
    à insérer sur place le corps de la fonction. Donc, l'invocation:</p>
<pre class="jscode">va_au_but();</pre>
<p>est équivalente à</p>
<pre class="jscode">avance();
if (!au_but()) {
    va_au_but();
}</pre>
<p>Supposons que la première fois qu'on exécute ces instructions, <code>au_but()</code>
soit faux (<code>false</code>) et donc <code>!au_but()</code> soit vrai (<code>true</code>)
... comme c'est le cas pour le monde
 <span class="world">Maison&nbsp;1</span>.  Dans ce cas, l'invocation
 <code>va_au_but()</code> est exécutée une deuxième fois et le code ci-dessus est donc équivalent
 à </p>
<pre class="jscode">avance();
    va_au_but();</pre>
<p>On peut à nouveau remplacer l'invocation <code>va_au_but()</code> par sa définition</p>

<pre class="jscode">avance();
    avance();
    if (!au_but()) {
        va_au_but();
    }</pre>
<p> et on pourrait, en théorie, continuer à faire éternellement des remplacements de la fonction par
    sa définition <b>si la condition restait toujours la même</b>.
</p>
<p>Heureusement, ce n'est pas le cas pour le monde <span class="world">Maison&nbsp;1</span>.
Dans ce cas, après la deuxième invocation d'<code>avance()</code>,
nous sommes <code>au_but()</code> et
<code>va_au_but()</code> n'est pas invoqué une troisième fois.  Le résultat est donc
équivalent à :</p>
<pre class="jscode">avance();
    avance();</pre>

<p><b>Assurez-vous de bien comprendre l'explication ci-dessus avant d'aller plus loinn. </p>

<h2>Petit changement...</h2>
<p>Considérez le programme suivant</p>
<pre class="jscode">function va_au_but(){
    avance();
    if (!au_but()) {
        va_au_but();
    }
    tourne_à_gauche();
}

// définition complétée; on y va!
va_au_but();</pre>
<p>Essayez de prédire ce que Reeborg fera avant d'exécuter le programme.  Une explication
    vous sera fournie à la prochaine leçon.
</p>
<a class="left-link" href="Javascript:void(0);" onClick="load_page('recursion')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('recursion3')">Suivant</a>