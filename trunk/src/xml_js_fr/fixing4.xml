<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('fixing3')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('fixing5')">Suivant</a>
</nav>
<h1>Rien à gauche?</h1>
<p>Exécutez le programme suivant:</p>
<pre class="jscode">var Reeborg = new RobotUsagé();
écrit( Reeborg.rien_devant() );
écrit( Reeborg.rien_à_droite() );</pre>
<p>Comme vous pouvez le lire dans le journal de Reeborg, il peut déterminer correctement
    s'il y a un mur devant lui ou à sa droite.  Malheureusement, il ne peut pas
    en faire de même à sa gauche: la méthode <code>rien_à_gauche</code> n'est pas définie.
    Corrigeons ceci.</p>
<p>En premier, jetons un coup d'oeil sur la définition des deux méthodes existantes
(notez l'absence de <code>()</code> lorsqu'on examine le code source):</p>
<pre class="jscode">var Reeborg = new RobotUsagé();
voir_source( Reeborg.rien_devant );
voir_source( Reeborg.rien_à_droite );</pre>
<p>Comme vous pouvez le constater, ces méthodes sont définies à partir de méthodes
    pour l'objet <code>RUR.world</code> ayant des noms anglais. [<small><em>front_is_clear</em> signifie
    <em>rien_devant</em></small>.]  Si vous exécutez l'instruction:</p>
<pre class="jscode">voir_source( RUR.world.front_is_clear );</pre>
<p>vous verrez une définition assez compliquée.  Par contre, si vous faites la même chose
    pour </p>
<pre class="jscode">voir_source( RUR.world.right_is_clear );</pre>
<p>vous verrez une définition beaucoup plus simple, qui utilise <code>front_is_clear</code>.
Examinez plus attentivement <code>RUR.world.right_is_clear()</code>.
Voyez-vous quelque chose d'un peu inhabituel?  Un indice: <em>turn_left</em> est la traduction
anglaise de <em>tourne_à_gauche</em>.</p>
<h2>Arguments optionnels</h2>
<p>Vous avez peut-être observé que <code>__turn_right()</code> et <code>turn_left()</code>
sont invoqués avec un argument (<code>true</code>)  plutôt que sans argument comme nous l'avons
fait jusqu'à maintenant.  Si vous examinez la définition de <code>tourne_à_gauche</code> avec</p>
<pre class="jscode">var Reeborg = new RobotUsagé();
voir_source( Reeborg.tourne_à_gauche );</pre>
<p>vous verrez effectivement que cette méthode comporte un argument optionnel, <code>no_frame</code>.
Lorsque cet argument est défini, la fonction retourne <b>avant</b> qu'une nouvelle image d'animation
(<em>frame</em>) soit ajoutée.  Ainsi le robot tourne ... mais ce virage n'est pas enregistré.
On note que, au lieu de <code>true</code>, on aurait pu passer n'importe quel argument
(sauf <code>undefined</code>) et le résultat aurait été le même.</p>
<h2>À votre tour</h2>
<p>Complétez le code suivant pour permettre à Reeborg de déterminer s'il y a un mur immédiatement
    à sa gauche.</p>
<pre class="jscode">RobotAmélioré.prototype.rien_à_gauche = function () {
    var résultat;
    this.tourne_... (true);
    ... = this.rien_devant();
    ...;
    return ...;
};

var Reeborg = new RobotAmélioré();
écrit( Reeborg.rien_à_gauche() );  // vrai ou faux?
Reeborg.tourne_à_gauche();
écrit( Reeborg.rien_à_gauche() );  // vrai ou faux?</pre>
<p>Puisque nous créons ceci comme une méthode pour le <b>robot</b> plutôt que pour
le <b>monde</b> (<em>world</em>) comme cela était le cas pour  <code>rien_à_droite</code>,
nous utilisons <code>this</code> plutôt que <code>robot</code> à l'intérieur de la définition.</p>
<p>Lorsque vous serez satisfait du résultat, et que vous aurez suffisamment testé cette nouvelle
    méthode, ajoutez-la à votre bibliothèque; n'oubliez pas de la sauvegarder.</p>

<a class="left-link" href="Javascript:void(0);" onClick="load_page('fixing3')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('fixing5')">Suivant</a>