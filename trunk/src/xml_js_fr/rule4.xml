<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('refine5')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('surprises')">Suivant</a>
</nav>
<h1>Règle numéro 4</h1>
<p>Dans les leçons précédentes, nous avons composé un programme qui permet à Reeborg
    d'accomplir plusieurs tâches de complexité variable.  Le but de ce programme
    était de permettre à Reeborg de faire le tour de son monde.  Bien que le
    programme soit relativement court, et que sa structure devrait être claire,
    son but ne serait pas nécessairement clair pour quelqu'un qui le lirait
    pour une première fois.  Une façon d'expliquer le but de ce programme serait
    peut-être de rajouter des commentaires comme ce qui suit. </p>
<pre class="jscode">
// On note le point de départ en déposant un jeton
dépose("jeton");

// On trouve une direction où un mur ne bloque pas le chemin
while ( !rien_devant() ) {
    tourne_à_gauche();
}
avance();

/* On sait qu'on a fait le tour du monde lorsqu'on revient
   au point de départ, là où on a déposé un jeton.
 */

while ( !jeton_ici() ){
    if (rien_à_droite()){  // on garde la droite
        tourne_à_droite();
        avance();
    } else if (rien_devant()){ // on avance ... suivant le mur
        avance();
    } else {
        tourne_à_gauche();  // ... on suit le mur
    }
}
</pre>

<p>Bien que ceci clarifie notre intention instruction par instruction,
    ça ne nous aide pas vraiment à comprendre l'algorithme (ou la méthode
    générale) utilisé pour résoudre ce problème. Une autre façon d'expliquer
    ce que ce programme fait est de prendre un peu de recul et de constater
    que le programme a deux parties:</p>
    <ol><li>On indique le point de départ et on amorce le trajet</li>
<li>on suit le mur à droite jusqu'à ce qu'on revienne au point de départ</li></ol>
<p>
    Écrivons donc le programme pour que ces deux parties soient plus
    en évidence et changeons les commentaires.
</p>
<pre class="jscode">
/* Ce programme indique à Reeborg comment faire le tour de son
   monde dans le sens anti-horaire, en suivant le mur jusqu'à
   ce qu'il revienne à son point de départ.
 */

function marque_point_départ_et_avance() {
    dépose("jeton");
    while ( !rien_devant() ) {
        tourne_à_gauche();
    }
    avance();
}

function suis_le_mur_à_droite() {
    if (rien_à_droite()){
        tourne_à_droite();
        avance();
    } else if (rien_devant()){
        avance();
    } else {
        tourne_à_gauche();
    }
}

var trouve_point_départ = jeton_ici;

/* fin des définitions ci-dessus;
   l'exécution suit */

marque_point_départ_et_avance();

while ( !trouve_point_départ() ){
    suis_le_mur_à_droite();
}
</pre>

<p>N'est-ce pas beaucoup plus clair comme ceci?</p>
<p><b>N.B.: Il serait peut-être utile de faire une copie de la fonction
     <code>suis_le_mur_à_droite()</code>
dans votre bibliothèque.</b></p>

<h2>Conclusion</h2>
<p>Nous avons commencé par un simple problème (faire le tour d'un monde
    rectangulaire), et, en changeant la solution un tout petit peu à chaque
    fois (ce qu'on appelle faire des <em>améliorations progressives</em>),
    nous avons put adapter le programme pour qu'il puisse résoudre des
    problèmes de plus en plus complexes.
    Après chaque petit changement, nous pouvions vérifier que la solution
    était toujours valable pour chaque monde résolu précédemment tout
    en étant capable de résoudre des mondes plus complexes.
    Nous avons également choisi des noms descriptifs pour les
    parties de l'algorithme ce qui a rendu le programme plus facile
    à lire et à comprendre.  Ceci est une stratégie que vous devriez
    adopter dans la conception de vos programmes:
</p>

<dl>
<dt><b>Règle numéro 4</b></dt>
<dd>Étapes à suivre pour écrire un programme:</dd>
<ul>
<li>débuter avec un programme simple;</li>
<li>introduire de petits changements, un à la fois;</li>
<li>s'assurer que les changements introduits ne brisent pas ce qui fonctionnait avant; </li>
<li>ajouter des commentaires descriptifs qui ne font pas que répéter ce que chaque instruction fait;</li>
<li>choisir des noms descriptifs.</li>
</dl>
</ul>
<p>Les deux derniers points sont essentiellement les même que la Règle numéro 2.</p>
<p>Avant de passer à la prochaine leçon, assurez-vous d'avoir le programme que
    nous venons de compléter prêt à être exécuté.
</p>
<a class="left-link" href="Javascript:void(0);" onClick="load_page('refine5')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('surprises')">Suivant</a>