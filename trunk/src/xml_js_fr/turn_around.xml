<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('functions1')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('library')">Suivant</a>
</nav>

<h1>Demi-tour!</h1>
<p>En plus d'instruire Reeborg de tourner à droite, vous avez probablement
    eu à lui faire demi-tour à quelques reprises.  On peut définir
    une fonction <code>demi_tour()</code> de la façon suivante:
</p>
<pre class="jscode">
function demi_tour () {
    tourne_à_gauche();
    tourne_à_gauche();
}</pre>
<p>Faites-le!</p>
<h2>De retour à <code>tourne_à_droite()</code></h2>
<p>Vous vous souvenez de <code>tourne_à_droite()</code>?  Revoici sa définition:</p>
<pre class="jscode">
function tourne_à_droite () {
    tourne_à_gauche();
    tourne_à_gauche();
    tourne_à_gauche();
}</pre>
<p>On remarque que les deux premières instructions sont identiques à la définition
    de <code>demi_tour()</code>.  Lorsque quelque chose du genre arrive, il
    est bon de se rappeler de la règle numéro 3:</p>
<dl>
<dt><b>Règle numéro 3</b></dt>
<dd>Lorsque vous écrivez des programmes informatiques, ne vous répétez pas. <br>
Je répète: <a href="http://fr.wikipedia.org/wiki/Ne_vous_r%C3%A9p%C3%A9tez_pas">ne vous répétez pas!</a></dd>
</dl>
<p>Donc, nous avons une répétitions d'instructions.  Bien que <code>tourne_à_droite()</code>
soit déjà toute simple, une bonne habitude à développer en programmation informatique
est de remplacer les parties de codes qui se répètent par une simple fonction.
Donc, nous devrions redéfinir <code>tourne_à_droite()</code> de la façon suivante:</p>
<pre class="jscode">
function tourne_à_droite () {
    demi_tour();
    tourne_à_gauche();
}</pre>
<p>L'idée suggérant cette pratique est que, plus la définition d'une fonction
    est courte, plus il est facile de détecter des problèmes ... et, en bout de
    ligne, de s'assurer qu'il n'y a pas de bogues.  De plus, une fois que nous
    avons défini et testé une fonction pour nous assurer qu'elle ne comporte
    pas de bogues, on réduit la possibilité de bogues ailleurs en l'utilisant
    aussi souvent que possible.  J’admets que l'exemple choisi peut sembler
    ridicule en raison de la simplicité des fonctions utilisées ... mais
    je n'ai pas d'exemples plus compliqués à vous offrir à ce moment-ci pour
    illustrer cette idée très importante.</p>

<h2>À votre tour!</h2>
<p>définissez la fonction <code>recule()</code> qui est l'opposé de la fonction
<code>avance()</code>.  Par ceci, je veux dire que si vous ceci devrait
permettre le code suivant: </p>
<pre class="jscode"> // départ au point x, y
avance();
recule();
// de retour au point x, y,
// faisant face à la même direction qu'au départ</pre>
<p>Assurez-vous de vérifier que le tout fonctionne!</p>
<a class="left-link" href="Javascript:void(0);" onClick="load_page('functions1')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('library')">Suivant</a>