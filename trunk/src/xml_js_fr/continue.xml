<nav>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('try')">Précédent</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('toc')">Table des matières</a>
<a class="fake_button blue-gradient" href="Javascript:void(0);" onClick="load_page('modify')">Suivant</a>
</nav>

<h1>Continue</h1>

<p>Nous avons vu comment Reeborg peut utiliser l'approche <em>mieux vaut demander pardon
que permission</em> avec des blocs <code>try/catch</code> et des mouvements aléatoires pour
réussir à sortir d'un labyrinthe.  Nous allons modifier légèrement le programme pour
compter le nombre de boucles que nous effectuons, en utilisant la variable <code>nb</code>.
Nous allons écrire cette information dans le journal de Reeborg et limiter le nombre
d'actions exécutées par Reeborg pour que l'information écrite dans le journal puisse facilement
être lue.</p>

<pre class="jscode">var résultat, nb = 0;
RUR.world.max_steps = 60;
pense(0);

while (!au_but()) {
    nb++;
    résultat = Math.random();
    if (résultat < 1/3 ){
        try {
            avance();
        } catch (e) {
            écrit("---");
            //continue;
        }
    } else if (résultat < 2/3 ) {
        tourne_à_gauche();
    } else {
        tourne_à_droite();
    }
    écrit(nb);
}</pre>
<p>Exécutez le programme à quelques reprises, examinant le résultat dans le journal à chaque fois.
    Notez qu'à chaque fois que <code>---</code> apparaît dans le journal de Reeborg,
    c'est parce que nous avons empêché Reeborg d'avancer parce qu'il aurait frappé un mur.
    Notez que le chiffre avant <code>---</code> et celui immédiatement après se suivent.
    Par exemple, voici le résultat partiel que j'ai obtenu lorsque j'ai exécuté
    ce programme.</p>
<pre>1
2
3
---
4
---
5
6</pre>
<p>Maintenant, enlevez les symboles <code>//</code> pour que la ligne contenant le mot-clé
<code>continue</code> ne soit plus un commentaire, et qu'elle soit exécutée.   Examinez attentivement
le résultat dans le journal de Reeborg.  Pouvez-vous déduire l'effet du mot-clé <code>continue</code>?</p>
<h2>continue</h2>
<p>Le mot-clé <code>continue</code> instruit Javascript de continuer la boucle <b>mais</b> de sauter au tout
début de la boucle avant de continuer.  En d'autres mots, il instruit Javascript d'ignorer toutes les
instructions qui sont écrites sur les lignes sous l'énoncé continue - mais seulement pour une boucle.
Ainsi, si l'énoncé <code>continue;</code> est exécuté, l'énoncé <code>écrit(nb);</code> qui apparaît
au bas de la boucle ne sera pas exécuté.  En recommençant du début de la boucle, la variable <code>nb</code>
est incrémentée à nouveau et le processus se poursuit.  Donc, avec l'énoncé <code>continue</code> présent,
si <code>---</code> est écrit, le nombre correspondant ne l'est pas, tel que par exemple:</p>
<pre>1
2
3
---
5
---
7
</pre>


<a class="left-link" href="Javascript:void(0);" onClick="load_page('try')">Précédent</a>
<a class="right-link" href="Javascript:void(0);" onClick="load_page('modify')">Suivant</a>
