"""Ce module contient les commandes qui peuvent être incluse dans
un programme du Monde de Reeborg.
"""


# When generating documentation using sphinx, these modules are both
# unavailable and not needed
try:
    from browser import window
    from reeborg_common import *
except:
    pass

__id = "fr"

_usage_ = """
<h2 id="%s">Commandes de base</h2>

    <p>Veuillez prendre note: en Javascript, <code>true</code> et <code>false</code> sont écrits
    en lettre minuscules; en Python, <code>True</code> et <code>False</code> débutent avec une
    lettre majuscule. Dans les explications ci-dessous, j'utilise la notation Python.</p>

<p> En plus de comprendre le Javascript ou le Python, Reeborg et tous les autres robots
connaissent les instructions suivantes:
</p>
<ul>
  <li><code>termine</code>: indique qu'un programme doit se terminer avec cette instruction. </li>
  <li><code>rien_devant()</code>: <code>True</code>
      s'il n'y a pas d'obstacle bloquant la voie de Reeborg.</li>
  <li><code>mur_devant()</code>: <code>True</code> s'il y a un mur bloquant la voie de Reeborg.</li>
  <li><code>est_face_au_nord()</code>: <code>True</code> si Reeborg fait face au nord
      (vers le haut de l'écran). </li>
  <li><code>avance()</code></li>
  <li><code>depose()</code> ou <code>depose("objet")</code> où "objet" est l'un de
    <code>"jeton"</code>,
    <code>"triangle"</code>, <code>"carré"</code>, <code>"étoile"</code>, etc. :
    Reeborg dépose l'objet
    en question là où il se trouve.</li>
    <li><code>transporte()</code>: indique si Reeborg transporte des objets ou non. L'utilisation
    est tout à fait semblable à celle de <code>objet_ici()</code>.
    </li>
  <li><code>rien_a_droite()</code>: <code>True</code> s'il n'y a pas d'obstacle
      immédiatement à la droite de Reeborg.</li>
  <li><code>mur_a_droite()</code>: <code>True</code> s'il y a un mur immédiatement à la droite de
      Reeborg.</li>
  <li><code>prend()</code> ou <code>prend("objet")</code> où "objet" est l'un de
     <code>"jeton"</code>, <code>"triangle"</code>, <code>"carré"</code>,
     <code>"étoile"</code>, etc.</li>
  <li><code>tourne_a_gauche()</code></li>
</ul>


<p>Pour créer des robots, on peut utiliser <code>RobotUsage()</code> prédédé de <code>new</code>
si on utilise Javascript.
</p>
<p>De plus, les commandes suivantes sont généralement disponibles sans être liées
  à un robot en particulier. </p>
<ul>
    <li><code>from biblio import *</code>: pour <b>Python</b>, iinclut le code qui se trouve sous
        l'onglet bibliothèque</li>
  <li><code>examine(objet Javascript)</code></li>
  <li><code>pause()</code>; peut être invoqué avec un argument en millisecondes
  indiquant la durée
  de la pause dans quel cas le programme continue sans avoir à cliquer sur un bouton. </li>
    <li><code>son(<code>True</code>)</code>: ajoute des effets sonores.
        Ces effets sonores peuvent être
        arrêtés en utilant "false" comme argument ou omettant l'argument comme ceci:
        <code>son()</code>.
        Les effets sonores sont arrêtés par défaut ou si le délai entre les actions est
        inférieur à 250ms.  </li>
  <li><code>pense(nombre)</code>: spécifie le montant de temps (en millisecondes) entre chaque
      action d'un robot. </li>
  <li><code>ecrit(chaîne)</code>: écrit une chaîne de caractère dans le journal de Reeborg,
      par exemple <code>ecrit("Bonjour !")</code>,
    mais <b>seulement</b> si le monde est visible - autrement utiliser <code>print</code>. </li>
  <li><code>Monde(chaîne)</code>: sélectionne un monde donné. </li>
  <li><code>print(chaîne)</code>: seulement valide avec Python; semblable à <code>write</code>.
  </li>
</ul>
""" % ("basic-commands-" + __id)

# When generating documentation using sphinx, window and therefore RUR are
# unavailable and not needed
try:
    RUR = window.RUR
    RUR.ui.add_help(_usage_, __id, "Français",
                "Au lieu de biblio, jeton, étoile, triangle et carré, utilisez : ")
except:
    pass

# The following is the only language specific function; it can be used in
# monde.html **only**, and not when imported from world.html or others
try:
    confirmer = RUR.confirmer
except:
    pass

# RUR._x_ defined in commands.js

#: special sphinx comment

def au_but():
    """Indique si Reeborg a atteint la position demandée.

    Returns:
        True si Reeborg a atteint son but.
    """
    return RUR._at_goal_()


def construit_un_mur():
    """Indique à Reeborg de construire un mur devant sa position."""
    RUR._build_wall_()


def rien_devant():
    """Indique si un obstacle (mur, clôture, eau, mur de brique,) bloque le chemin.

    Returns:
       True si le chemin est non bloqué, False autrement."""
    return RUR._front_is_clear_()


def mur_devant():
    return RUR._wall_in_front_()


def est_face_au_nord():
    return RUR._is_facing_north_()


def face_au_nord():
    raise ReeborgError("face_au_nord() est désuet; utilisez est_face_au_nord()")


def avance():
    RUR._move_()


def depose(obj=None):
    if obj is None:
        RUR._put_()
    else:
        RUR._put_(obj)


def rien_a_droite():
    return RUR._right_is_clear_()


def mur_a_droite():
    return RUR._wall_on_right_()


def prend(obj=None):
    if obj is None:
        RUR._take_()
    else:
        RUR._take_(obj)


def tourne_a_gauche():
    RUR._turn_left_()


def nombre_d_instructions(nb):
    RUR._set_max_steps_(nb)


def nombre_de_robots(nb):
    RUR._set_max_nb_robots_(nb)


def examine(obj):
    RUR.inspect(obj)  # defined in rur_utils.js


def voir_source(obj):
    RUR.view_source(obj)  # defined in rur_utils.js


def termine():
    RUR.control.done()


def son(bool):
    RUR.control.sound(bool)


def pense(ms):
    RUR.control.think(ms)


def pause(ms=None):
    if ms is None:
        RUR.control.pause()
    else:
        RUR.control.pause(ms)


def Monde(url, shortname=None):
    if shortname is None:
        RUR.file_io.load_world_from_program(url)
    else:
        RUR.file_io.load_world_from_program(url, shortname)


def narration(html):
    RUR.control.narration(html)


def clear_print():
    RUR.control.clear_print()


def couleur_de_trace(couleur):
    RUR._set_trace_color_(couleur)


def style_de_trace(style):
    RUR.vis_robot.set_trace_style(style)  # add argument translation


def MenuPersonalisé(contenu):
    RUR.custom_menu.make(contenu)


def disparait():
    RUR.world.remove_robots()


def pas_de_surlignement():
    RUR.ui.user_no_highlight()


def enregistrement(bool):
    RUR._recording_(bool)


def nouvelles_images_de_robot(images):
    if "est" in images:
        images["east"] = images["est"]
    if "ouest" in images:
        images["west"] = images["ouest"]
    if "nord" in images:
        images["north"] = images["nord"]
    if "sud" in images:
        images["south"] = images["sud"]
    RUR.vis_robot.new_robot_images(images)


def objet_ici(obj=None):
    """ Indique si un ou des objets se trouvent à la position du robot.

    Args:
        obj: paramètre optionnel qui est le nom d'un objet sous forme de
            chaîne de caractères.

    Returns:
        une liste d'objets retrouvés.  Si aucun objet n'est présent
        ou si un objet spécifié comme paramètre n'est pas présent,
        le résultat est une liste vide.

    Exemples possibles:

        >>> objet_ici()
        ["jeton", "pomme"]
        >>> objet_ici("jeton")
        ["jeton"]
        >>> objet_ici("fraise")
        []
    """
    if obj is not None:
        ans = RUR._object_here_(obj)
    else:
        ans = RUR._object_here_()
    return list(ans)  # convert from Javascript list-like object to proper Python list


def transporte(obj=None):
    if obj is not None:
        ans = RUR._carries_object_(obj)
    else:
        ans = RUR._carries_object_()
    return list(ans)


class RobotUsage(object):
    """Créé un robot usagé.

       Args:
           x: coordonnée horizontale; un entier supérieur ou égal à 1
           y: coordonnée vertical; un entier supérieur ou égal à 1
           orientation: une des valeurs suivante: "nord", "sud", "est", "ouest"
           jeton: nombre initial de jetons à donner au robot;
                  un entier supérieur ou égal à 1,
                  ou la valeur "inf" pour un nombre infini.
        """
    def __init__(self, x=1, y=1, orientation='est', jetons=None):
        if jetons is None:
            robot = RUR.robot.create_robot(x, y, orientation)
        else:
            robot = RUR.robot.create_robot(x, y, orientation, jetons)
        self.body = robot
        RUR.world.add_robot(self.body)

    def avance(self):
        """avance d'une case"""
        RUR.control.move(self.body)

    def au_but(self):
        """Indique si Reeborg a atteint la position demandée.

        Returns:
            True si Reeborg a atteint son but.
        """
        return RUR.control.at_goal(self.body)

    def construit_un_mur(self):
        """Indique à Reeborg de construire un mur devant sa position."""
        RUR.control.build_wall(self.body)

    def rien_devant(self, no_frame=False):
        """Indique si un obstacle (mur, clôture, eau, mur de brique, ) bloque
           le chemin.

        Returns:
           True si le chemin est non bloqué, False autrement."""
        return RUR.control.front_is_clear(self.body, no_frame)

    def mur_devant(self):
        """True == mur bloque le chemin"""
        return RUR.control.wall_in_front(self.body)

    def est_face_au_nord(self):
        """True == Reeborg est orienté vers le nord (haut de l'écran)"""
        return RUR.control.is_facing_north(self.body)

    def face_au_nord(self):
        """Ne plus utiliser cette méthode; elle a été remplacée par est_face_au_nord"""
        raise ReeborgError("face_au_nord() est désuet; utilisez est_face_au_nord()")

    def depose(self, obj=False):
        RUR.control.put(self.body, obj)

    def rien_a_droite(self):
        return RUR.control.right_is_clear(self.body)

    def mur_a_droite(self):
        return RUR.control.wall_on_right(self.body)

    def objet_ici(self, obj=None):
        """ Indique si un ou des objets se trouvent à la position du robot.

        Args:
            obj: paramètre optionnel qui est le nom d'un objet sous forme de
                chaîne de caractères.

        Returns:
            une liste d'objets retrouvés.  Si aucun objet n'est présent
            ou si un objet spécifié comme paramètre n'est pas présent,
            le résultat est une liste vide.

        Exemples possibles:

            >>> objet_ici()
            ["jeton", "pomme"]
            >>> objet_ici("jeton")
            ["jeton"]
            >>> objet_ici("fraise")
            []
        """
        if obj is not None:
            return list(RUR.control.object_here(self.body, obj))
        else:
            return list(RUR.control.object_here(self.body))

    def transporte(self, obj=None):
        if obj is not None:
            return list(RUR.control.carries_object(self.body, obj))
        else:
            return list(RUR.control.carries_object(self.body))

    def prend(self, obj=False):
        RUR.control.take(self.body, obj)

    def tourne_a_gauche(self, no_frame=False):
        RUR.control.turn_left(self.body, no_frame)

    def modèle(self, model):
        RUR.control.set_model(self.body, model)

    def couleur_de_trace(self, color):
        RUR.control.set_trace_color(self.body, color)

    def style_de_trace(self, style):
        RUR.control.set_trace_style(self.body, style)


class InfoSatellite():

    @property
    def carte_du_monde(self):
        """retourne un dict qui contient l'information au
           sujet du monde.
        """
        import json
        return json.loads(RUR.control.get_world_map())

    def imprime_carte(self):
        """imprime une copie formattée de la carte"""
        print(RUR.control.get_world_map())
